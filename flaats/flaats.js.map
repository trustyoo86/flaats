{"version":3,"sources":["node_modules/browser-pack/_prelude.js","flaats-src/lib/iscroll/iScroll-custom.js","flaats-src/src/color.js","flaats-src/src/element/base.js","flaats-src/src/element/canvas/Image.js","flaats-src/src/element/canvas/Link.js","flaats-src/src/element/canvas/polygon.js","flaats-src/src/events.js","flaats-src/src/flaats.js","flaats-src/src/layer.js","flaats-src/src/selector.js"],"names":[],"mappings":"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","file":"flaats.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n * iScroll v4.2.5 ~ Copyright (c) 2012 Matteo Spinelli, http://cubiq.org\n * Released under MIT license, http://cubiq.org/license\n */\n/**\n * NOTE\n*   modefy date   actor   reason    \n*   2013.08.01    jku   좀더 자연스러운 동작을 위해 이벤트를 wrapper에 bind alc unbind 하도록 수정..\n* 2013.09.05    jku   scrollbar의 z-index를 삭제...\n* 2014.02.28    jku   snap 동작 관련 수정\n */\n(function(window, doc){\nvar m = Math,\n  dummyStyle = doc.createElement('div').style,\n  vendor = (function () {\n    var vendors = 't,webkitT,MozT,msT,OT'.split(','),\n      t,\n      i = 0,\n      l = vendors.length;\n\n    for ( ; i < l; i++ ) {\n      t = vendors[i] + 'ransform';\n      if ( t in dummyStyle ) {\n        return vendors[i].substr(0, vendors[i].length - 1);\n      }\n    }\n\n    return false;\n  })(),\n  cssVendor = vendor ? '-' + vendor.toLowerCase() + '-' : '',\n\n  // Style properties\n  transform = prefixStyle('transform'),\n  transitionProperty = prefixStyle('transitionProperty'),\n  transitionDuration = prefixStyle('transitionDuration'),\n  transformOrigin = prefixStyle('transformOrigin'),\n  transitionTimingFunction = prefixStyle('transitionTimingFunction'),\n  transitionDelay = prefixStyle('transitionDelay'),\n\n    // Browser capabilities\n  isAndroid = (/android/gi).test(navigator.appVersion),\n  isIDevice = (/iphone|ipad/gi).test(navigator.appVersion),\n  isTouchPad = (/hp-tablet/gi).test(navigator.appVersion),\n\n    has3d = prefixStyle('perspective') in dummyStyle,\n    hasTouch = 'ontouchstart' in window && !isTouchPad,\n    hasTransform = vendor !== false,\n    hasTransitionEnd = prefixStyle('transition') in dummyStyle,\n\n  RESIZE_EV = 'onorientationchange' in window ? 'orientationchange' : 'resize',\n  START_EV = hasTouch ? 'touchstart' : 'mousedown',\n  MOVE_EV = hasTouch ? 'touchmove' : 'mousemove',\n  END_EV = hasTouch ? 'touchend' : 'mouseup',\n  CANCEL_EV = hasTouch ? 'touchcancel' : 'mouseup',\n  TRNEND_EV = (function () {\n    if ( vendor === false ) return false;\n\n    var transitionEnd = {\n        ''      : 'transitionend',\n        'webkit'  : 'webkitTransitionEnd',\n        'Moz'   : 'transitionend',\n        'O'     : 'otransitionend',\n        'ms'    : 'MSTransitionEnd'\n      };\n\n    return transitionEnd[vendor];\n  })(),\n\n  nextFrame = (function() {\n    return window.requestAnimationFrame ||\n      window.webkitRequestAnimationFrame ||\n      window.mozRequestAnimationFrame ||\n      window.oRequestAnimationFrame ||\n      window.msRequestAnimationFrame ||\n      function(callback) { return setTimeout(callback, 1); };\n  })(),\n  cancelFrame = (function () {\n    return window.cancelRequestAnimationFrame ||\n      window.webkitCancelAnimationFrame ||\n      window.webkitCancelRequestAnimationFrame ||\n      window.mozCancelRequestAnimationFrame ||\n      window.oCancelRequestAnimationFrame ||\n      window.msCancelRequestAnimationFrame ||\n      clearTimeout;\n  })(),\n\n  // Helpers\n  translateZ = has3d ? ' translateZ(0)' : '',\n\n  // Constructor\n  iScroll = function (el, options) {\n    var that = this,\n      i;\n\n    that.wrapper = typeof el == 'object' ? el : doc.getElementById(el);\n    that.wrapper.style.overflow = 'hidden';\n    that.scroller = that.wrapper.children[0];\n\n    // Default options\n    that.options = {\n      hScroll: true,\n      vScroll: true,\n      x: 0,\n      y: 0,\n      bounce: true,\n      bounceLock: false,\n      momentum: true,\n      lockDirection: true,\n      useTransform: true,\n      useTransition: false,\n      topOffset: 0,\n      checkDOMChanges: false,   // Experimental\n      handleClick: true,\n\n      // Scrollbar\n      hScrollbar: true,\n      vScrollbar: true,\n      fixedScrollbar: isAndroid,\n      hideScrollbar: isIDevice,\n      fadeScrollbar: isIDevice && has3d,\n      scrollbarClass: '',\n\n      // Zoom\n      zoom: false,\n      zoomMin: 1,\n      zoomMax: 4,\n      doubleTapZoom: 2,\n      wheelAction: 'scroll',\n\n      // Snap\n      snap: false,\n      snapThreshold: 1,\n\n      // Events\n      onRefresh: null,\n      onBeforeScrollStart: function (e) { e.preventDefault(); },\n      onScrollStart: null,\n      onBeforeScrollMove: null,\n      onScrollMove: null,\n      onBeforeScrollEnd: null,\n      onScrollEnd: null,\n      onTouchEnd: null,\n      onDestroy: null,\n      onZoomStart: null,\n      onZoom: null,\n      onZoomEnd: null\n    };\n\n    // User defined options\n    for (i in options) that.options[i] = options[i];\n    \n    // Set starting position\n    that.x = that.options.x;\n    that.y = that.options.y;\n\n    // Normalize options\n    that.options.useTransform = hasTransform && that.options.useTransform;\n    that.options.hScrollbar = that.options.hScroll && that.options.hScrollbar;\n    that.options.vScrollbar = that.options.vScroll && that.options.vScrollbar;\n    that.options.zoom = that.options.useTransform && that.options.zoom;\n    that.options.useTransition = hasTransitionEnd && that.options.useTransition;\n\n    // Helpers FIX ANDROID BUG!\n    // translate3d and scale doesn't work together!\n    // Ignoring 3d ONLY WHEN YOU SET that.options.zoom\n    if ( that.options.zoom && isAndroid ){\n      translateZ = '';\n    }\n    \n    // Set some default styles\n    that.scroller.style[transitionProperty] = that.options.useTransform ? cssVendor + 'transform' : 'top left';\n    that.scroller.style[transitionDuration] = '0';\n    that.scroller.style[transformOrigin] = '0 0';\n    if (that.options.useTransition) that.scroller.style[transitionTimingFunction] = 'cubic-bezier(0.33,0.66,0.66,1)';\n    \n    if (that.options.useTransform) that.scroller.style[transform] = 'translate(' + that.x + 'px,' + that.y + 'px)' + translateZ;\n    else that.scroller.style.cssText += ';position:absolute;top:' + that.y + 'px;left:' + that.x + 'px';\n\n    if (that.options.useTransition) that.options.fixedScrollbar = true;\n\n    that.refresh();\n\n    that._bind(RESIZE_EV, window);\n    that._bind(START_EV);\n    if (!hasTouch) {\n      if (that.options.wheelAction != 'none') {\n        that._bind('DOMMouseScroll');\n        that._bind('mousewheel');\n      }\n    }\n\n    if (that.options.checkDOMChanges) that.checkDOMTime = setInterval(function () {\n      that._checkDOMChanges();\n    }, 500);\n  };\n\n// Prototype\niScroll.prototype = {\n  enabled: true,\n  x: 0,\n  y: 0,\n  steps: [],\n  scale: 1,\n  currPageX: 0, currPageY: 0,\n  pagesX: [], pagesY: [],\n  aniTime: null,\n  wheelZoomCount: 0,\n  \n  handleEvent: function (e) {\n    var that = this;\n    switch(e.type) {\n      case START_EV:\n        if (!hasTouch && e.button !== 0) return;\n        that._start(e);\n        break;\n      case MOVE_EV: that._move(e); break;\n      case END_EV:\n      case CANCEL_EV: that._end(e); break;\n      case RESIZE_EV: that._resize(); break;\n      case 'DOMMouseScroll': case 'mousewheel': that._wheel(e); break;\n      case TRNEND_EV: that._transitionEnd(e); break;\n    }\n  },\n  \n  _checkDOMChanges: function () {\n    if (this.moved || this.zoomed || this.animating ||\n      (this.scrollerW == this.scroller.offsetWidth * this.scale && this.scrollerH == this.scroller.offsetHeight * this.scale)) return;\n\n    this.refresh();\n  },\n  \n  _scrollbar: function (dir) {\n    var that = this,\n      bar;\n\n    if (!that[dir + 'Scrollbar']) {\n      if (that[dir + 'ScrollbarWrapper']) {\n        if (hasTransform) that[dir + 'ScrollbarIndicator'].style[transform] = '';\n        that[dir + 'ScrollbarWrapper'].parentNode.removeChild(that[dir + 'ScrollbarWrapper']);\n        that[dir + 'ScrollbarWrapper'] = null;\n        that[dir + 'ScrollbarIndicator'] = null;\n      }\n\n      return;\n    }\n\n    // modify by jku -> scroll bar의 z-index 삭제.\n    if (!that[dir + 'ScrollbarWrapper']) {\n      // Create the scrollbar wrapper\n      bar = doc.createElement('div');\n\n      if (that.options.scrollbarClass) bar.className = that.options.scrollbarClass + dir.toUpperCase();\n      //else bar.style.cssText = 'position:absolute;z-index:100;' + (dir == 'h' ? 'height:7px;bottom:1px;left:2px;right:' + (that.vScrollbar ? '7' : '2') + 'px' : 'width:7px;bottom:' + (that.hScrollbar ? '7' : '2') + 'px;top:2px;right:1px');\n      else bar.style.cssText = 'position:absolute;' + (dir == 'h' ? 'height:7px;bottom:1px;left:2px;right:' + (that.vScrollbar ? '7' : '2') + 'px' : 'width:7px;bottom:' + (that.hScrollbar ? '7' : '2') + 'px;top:2px;right:1px');\n      bar.style.cssText += ';pointer-events:none;' + cssVendor + 'transition-property:opacity;' + cssVendor + 'transition-duration:' + (that.options.fadeScrollbar ? '350ms' : '0') + ';overflow:hidden;opacity:' + (that.options.hideScrollbar ? '0' : '1');\n\n      that.wrapper.appendChild(bar);\n      that[dir + 'ScrollbarWrapper'] = bar;\n\n      // Create the scrollbar indicator\n      bar = doc.createElement('div');\n      if (!that.options.scrollbarClass) {\n        //bar.style.cssText = 'position:absolute;z-index:100;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);' + cssVendor + 'background-clip:padding-box;' + cssVendor + 'box-sizing:border-box;' + (dir == 'h' ? 'height:100%' : 'width:100%') + ';' + cssVendor + 'border-radius:3px;border-radius:3px';\n        bar.style.cssText = 'position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);' + cssVendor + 'background-clip:padding-box;' + cssVendor + 'box-sizing:border-box;' + (dir == 'h' ? 'height:100%' : 'width:100%') + ';' + cssVendor + 'border-radius:3px;border-radius:3px';\n      }\n      bar.style.cssText += ';pointer-events:none;' + cssVendor + 'transition-property:' + cssVendor + 'transform;' + cssVendor + 'transition-timing-function:cubic-bezier(0.33,0.66,0.66,1);' + cssVendor + 'transition-duration:0;' + cssVendor + 'transform: translate(0,0)' + translateZ;\n      if (that.options.useTransition) bar.style.cssText += ';' + cssVendor + 'transition-timing-function:cubic-bezier(0.33,0.66,0.66,1)';\n\n      that[dir + 'ScrollbarWrapper'].appendChild(bar);\n      that[dir + 'ScrollbarIndicator'] = bar;\n    }\n\n    if (dir == 'h') {\n      that.hScrollbarSize = that.hScrollbarWrapper.clientWidth;\n      that.hScrollbarIndicatorSize = m.max(m.round(that.hScrollbarSize * that.hScrollbarSize / that.scrollerW), 8);\n      that.hScrollbarIndicator.style.width = that.hScrollbarIndicatorSize + 'px';\n      that.hScrollbarMaxScroll = that.hScrollbarSize - that.hScrollbarIndicatorSize;\n      that.hScrollbarProp = that.hScrollbarMaxScroll / that.maxScrollX;\n    } else {\n      that.vScrollbarSize = that.vScrollbarWrapper.clientHeight;\n      that.vScrollbarIndicatorSize = m.max(m.round(that.vScrollbarSize * that.vScrollbarSize / that.scrollerH), 8);\n      that.vScrollbarIndicator.style.height = that.vScrollbarIndicatorSize + 'px';\n      that.vScrollbarMaxScroll = that.vScrollbarSize - that.vScrollbarIndicatorSize;\n      that.vScrollbarProp = that.vScrollbarMaxScroll / that.maxScrollY;\n    }\n\n    // Reset position\n    that._scrollbarPos(dir, true);\n  },\n  \n  _resize: function () {\n    var that = this;\n    setTimeout(function () { that.refresh(); }, isAndroid ? 200 : 0);\n  },\n  \n  _pos: function (x, y) {\n    if (this.zoomed) return;\n\n    x = this.hScroll ? x : 0;\n    y = this.vScroll ? y : 0;\n\n    if (this.options.useTransform) {\n      this.scroller.style[transform] = 'translate(' + x + 'px,' + y + 'px) scale(' + this.scale + ')' + translateZ;\n    } else {\n      x = m.round(x);\n      y = m.round(y);\n      this.scroller.style.left = x + 'px';\n      this.scroller.style.top = y + 'px';\n    }\n\n    this.x = x;\n    this.y = y;\n\n    this._scrollbarPos('h');\n    this._scrollbarPos('v');\n  },\n\n  _scrollbarPos: function (dir, hidden) {\n    var that = this,\n      pos = dir == 'h' ? that.x : that.y,\n      size;\n\n    if (!that[dir + 'Scrollbar']) return;\n\n    pos = that[dir + 'ScrollbarProp'] * pos;\n\n    if (pos < 0) {\n      if (!that.options.fixedScrollbar) {\n        size = that[dir + 'ScrollbarIndicatorSize'] + m.round(pos * 3);\n        if (size < 8) size = 8;\n        that[dir + 'ScrollbarIndicator'].style[dir == 'h' ? 'width' : 'height'] = size + 'px';\n      }\n      pos = 0;\n    } else if (pos > that[dir + 'ScrollbarMaxScroll']) {\n      if (!that.options.fixedScrollbar) {\n        size = that[dir + 'ScrollbarIndicatorSize'] - m.round((pos - that[dir + 'ScrollbarMaxScroll']) * 3);\n        if (size < 8) size = 8;\n        that[dir + 'ScrollbarIndicator'].style[dir == 'h' ? 'width' : 'height'] = size + 'px';\n        pos = that[dir + 'ScrollbarMaxScroll'] + (that[dir + 'ScrollbarIndicatorSize'] - size);\n      } else {\n        pos = that[dir + 'ScrollbarMaxScroll'];\n      }\n    }\n\n    that[dir + 'ScrollbarWrapper'].style[transitionDelay] = '0';\n    that[dir + 'ScrollbarWrapper'].style.opacity = hidden && that.options.hideScrollbar ? '0' : '1';\n    that[dir + 'ScrollbarIndicator'].style[transform] = 'translate(' + (dir == 'h' ? pos + 'px,0)' : '0,' + pos + 'px)') + translateZ;\n  },\n  \n  _start: function (e) {\n    var that = this,\n      point = hasTouch ? e.touches[0] : e,\n      matrix, x, y,\n      c1, c2;\n\n    // modify by jku that.enabled -> 동작 유무 처리 that.animating -> snap 자연스럽게 하기 위해\n    if (!that.enabled || that.animating) return;\n\n    if (that.options.onBeforeScrollStart) that.options.onBeforeScrollStart.call(that, e);\n\n    if (that.options.useTransition || that.options.zoom) that._transitionTime(0);\n\n    that.moved = false;\n    that.animating = false;\n    that.zoomed = false;\n    that.distX = 0;\n    that.distY = 0;\n    that.absDistX = 0;\n    that.absDistY = 0;\n    that.dirX = 0;\n    that.dirY = 0;\n\n    // Gesture start\n    if (that.options.zoom && hasTouch && e.touches.length > 1) {\n      c1 = m.abs(e.touches[0].pageX-e.touches[1].pageX);\n      c2 = m.abs(e.touches[0].pageY-e.touches[1].pageY);\n      that.touchesDistStart = m.sqrt(c1 * c1 + c2 * c2);\n\n      that.originX = m.abs(e.touches[0].pageX + e.touches[1].pageX - that.wrapperOffsetLeft * 2) / 2 - that.x;\n      that.originY = m.abs(e.touches[0].pageY + e.touches[1].pageY - that.wrapperOffsetTop * 2) / 2 - that.y;\n\n      if (that.options.onZoomStart) that.options.onZoomStart.call(that, e);\n    }\n\n    if (that.options.momentum) {\n      if (that.options.useTransform) {\n        // Very lame general purpose alternative to CSSMatrix\n        matrix = getComputedStyle(that.scroller, null)[transform].replace(/[^0-9\\-.,]/g, '').split(',');\n        x = +(matrix[12] || matrix[4]);\n        y = +(matrix[13] || matrix[5]);\n      } else {\n        x = +getComputedStyle(that.scroller, null).left.replace(/[^0-9-]/g, '');\n        y = +getComputedStyle(that.scroller, null).top.replace(/[^0-9-]/g, '');\n      }\n      \n      if (x != that.x || y != that.y) {\n        if (that.options.useTransition) that._unbind(TRNEND_EV);\n        else cancelFrame(that.aniTime);\n        that.steps = [];\n        that._pos(x, y);\n        if (that.options.onScrollEnd) that.options.onScrollEnd.call(that);\n      }\n    }\n\n    that.absStartX = that.x;  // Needed by snap threshold\n    that.absStartY = that.y;\n\n    that.startX = that.x;\n    that.startY = that.y;\n    that.pointX = point.pageX;\n    that.pointY = point.pageY;\n\n    that.startTime = e.timeStamp || Date.now();\n\n    if (that.options.onScrollStart) that.options.onScrollStart.call(that, e);\n\n    that._bind(MOVE_EV, window);\n    that._bind(END_EV, window);\n    that._bind(CANCEL_EV, window);\n  },\n  \n  _move: function (e) {\n    var that = this,\n      point = hasTouch ? e.touches[0] : e,\n      deltaX = point.pageX - that.pointX,\n      deltaY = point.pageY - that.pointY,\n      newX = that.x + deltaX,\n      newY = that.y + deltaY,\n      c1, c2, scale,\n      timestamp = e.timeStamp || Date.now();\n\n    if (that.options.onBeforeScrollMove) that.options.onBeforeScrollMove.call(that, e);\n\n    // Zoom\n    if (that.options.zoom && hasTouch && e.touches.length > 1) {\n      c1 = m.abs(e.touches[0].pageX - e.touches[1].pageX);\n      c2 = m.abs(e.touches[0].pageY - e.touches[1].pageY);\n      that.touchesDist = m.sqrt(c1*c1+c2*c2);\n\n      that.zoomed = true;\n\n      scale = 1 / that.touchesDistStart * that.touchesDist * this.scale;\n\n      if (scale < that.options.zoomMin) scale = 0.5 * that.options.zoomMin * Math.pow(2.0, scale / that.options.zoomMin);\n      else if (scale > that.options.zoomMax) scale = 2.0 * that.options.zoomMax * Math.pow(0.5, that.options.zoomMax / scale);\n\n      that.lastScale = scale / this.scale;\n\n      newX = this.originX - this.originX * that.lastScale + this.x;\n      newY = this.originY - this.originY * that.lastScale + this.y;\n\n      this.scroller.style[transform] = 'translate(' + newX + 'px,' + newY + 'px) scale(' + scale + ')' + translateZ;\n\n      if (that.options.onZoom) that.options.onZoom.call(that, e);\n      return;\n    }\n\n    that.pointX = point.pageX;\n    that.pointY = point.pageY;\n\n    // Slow down if outside of the boundaries\n    if (newX > 0 || newX < that.maxScrollX) {\n      newX = that.options.bounce ? that.x + (deltaX / 2) : newX >= 0 || that.maxScrollX >= 0 ? 0 : that.maxScrollX;\n    }\n    if (newY > that.minScrollY || newY < that.maxScrollY) {\n      newY = that.options.bounce ? that.y + (deltaY / 2) : newY >= that.minScrollY || that.maxScrollY >= 0 ? that.minScrollY : that.maxScrollY;\n    }\n\n    that.distX += deltaX;\n    that.distY += deltaY;\n    that.absDistX = m.abs(that.distX);\n    that.absDistY = m.abs(that.distY);\n\n    if (that.absDistX < 6 && that.absDistY < 6) {\n      return;\n    }\n\n    // Lock direction\n    if (that.options.lockDirection) {\n      if (that.absDistX > that.absDistY + 5) {\n        newY = that.y;\n        deltaY = 0;\n      } else if (that.absDistY > that.absDistX + 5) {\n        newX = that.x;\n        deltaX = 0;\n      }\n    }\n\n    that.moved = true;\n    that._pos(newX, newY);\n    that.dirX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;\n    that.dirY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;\n\n    if (timestamp - that.startTime > 300) {\n      that.startTime = timestamp;\n      that.startX = that.x;\n      that.startY = that.y;\n    }\n    \n    if (that.options.onScrollMove) that.options.onScrollMove.call(that, e);\n  },\n  \n  _end: function (e) {\n    if (hasTouch && e.touches.length !== 0) return;\n\n    var that = this,\n      point = hasTouch ? e.changedTouches[0] : e,\n      target, ev,\n      momentumX = { dist:0, time:0 },\n      momentumY = { dist:0, time:0 },\n      duration = (e.timeStamp || Date.now()) - that.startTime,\n      newPosX = that.x,\n      newPosY = that.y,\n      distX, distY,\n      newDuration,\n      snap,\n      scale;\n\n    that._unbind(MOVE_EV, window);\n    that._unbind(END_EV, window);\n    that._unbind(CANCEL_EV, window);\n\n    if (that.options.onBeforeScrollEnd) that.options.onBeforeScrollEnd.call(that, e);\n\n    if (that.zoomed) {\n      scale = that.scale * that.lastScale;\n      scale = Math.max(that.options.zoomMin, scale);\n      scale = Math.min(that.options.zoomMax, scale);\n      that.lastScale = scale / that.scale;\n      that.scale = scale;\n\n      that.x = that.originX - that.originX * that.lastScale + that.x;\n      that.y = that.originY - that.originY * that.lastScale + that.y;\n      \n      that.scroller.style[transitionDuration] = '200ms';\n      that.scroller.style[transform] = 'translate(' + that.x + 'px,' + that.y + 'px) scale(' + that.scale + ')' + translateZ;\n      \n      that.zoomed = false;\n      that.refresh();\n\n      if (that.options.onZoomEnd) that.options.onZoomEnd.call(that, e);\n      return;\n    }\n\n    if (!that.moved) {\n      if (hasTouch) {\n        if (that.doubleTapTimer && that.options.zoom) {\n          // Double tapped\n          clearTimeout(that.doubleTapTimer);\n          that.doubleTapTimer = null;\n          if (that.options.onZoomStart) that.options.onZoomStart.call(that, e);\n          that.zoom(that.pointX, that.pointY, that.scale == 1 ? that.options.doubleTapZoom : 1);\n          if (that.options.onZoomEnd) {\n            setTimeout(function() {\n              that.options.onZoomEnd.call(that, e);\n            }, 200); // 200 is default zoom duration\n          }\n        } else if (this.options.handleClick) {\n          that.doubleTapTimer = setTimeout(function () {\n            that.doubleTapTimer = null;\n\n            // Find the last touched element\n            target = point.target;\n            while (target.nodeType != 1) target = target.parentNode;\n\n            if (target.tagName != 'SELECT' && target.tagName != 'INPUT' && target.tagName != 'TEXTAREA') {\n              ev = doc.createEvent('MouseEvents');\n              ev.initMouseEvent('click', true, true, e.view, 1,\n                point.screenX, point.screenY, point.clientX, point.clientY,\n                e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,\n                0, null);\n              ev._fake = true;\n              target.dispatchEvent(ev);\n            }\n          }, that.options.zoom ? 250 : 0);\n        }\n      }\n\n      that._resetPos(400);\n\n      if (that.options.onTouchEnd) that.options.onTouchEnd.call(that, e);\n      return;\n    }\n\n    if (duration < 300 && that.options.momentum) {\n      momentumX = newPosX ? that._momentum(newPosX - that.startX, duration, -that.x, that.scrollerW - that.wrapperW + that.x, that.options.bounce ? that.wrapperW : 0) : momentumX;\n      momentumY = newPosY ? that._momentum(newPosY - that.startY, duration, -that.y, (that.maxScrollY < 0 ? that.scrollerH - that.wrapperH + that.y - that.minScrollY : 0), that.options.bounce ? that.wrapperH : 0) : momentumY;\n\n      newPosX = that.x + momentumX.dist;\n      newPosY = that.y + momentumY.dist;\n\n      if ((that.x > 0 && newPosX > 0) || (that.x < that.maxScrollX && newPosX < that.maxScrollX)) momentumX = { dist:0, time:0 };\n      if ((that.y > that.minScrollY && newPosY > that.minScrollY) || (that.y < that.maxScrollY && newPosY < that.maxScrollY)) momentumY = { dist:0, time:0 };\n    }\n\n    if (momentumX.dist || momentumY.dist) {\n      newDuration = m.max(m.max(momentumX.time, momentumY.time), 10);\n\n      // Do we need to snap?\n      if (that.options.snap) {\n        distX = newPosX - that.absStartX;\n        distY = newPosY - that.absStartY;\n        if (m.abs(distX) < that.options.snapThreshold && m.abs(distY) < that.options.snapThreshold) { that.scrollTo(that.absStartX, that.absStartY, 200); }\n        else {\n          snap = that._snap(newPosX, newPosY);\n          newPosX = snap.x;\n          newPosY = snap.y;\n          newDuration = m.max(snap.time, newDuration);\n        }\n      }\n\n      that.scrollTo(m.round(newPosX), m.round(newPosY), newDuration);\n\n      if (that.options.onTouchEnd) that.options.onTouchEnd.call(that, e);\n      return;\n    }\n\n    // Do we need to snap?\n    if (that.options.snap) {\n      distX = newPosX - that.absStartX;\n      distY = newPosY - that.absStartY;\n      if (m.abs(distX) < that.options.snapThreshold && m.abs(distY) < that.options.snapThreshold) that.scrollTo(that.absStartX, that.absStartY, 200);\n      else {\n        snap = that._snap(that.x, that.y);\n        if (snap.x != that.x || snap.y != that.y) that.scrollTo(snap.x, snap.y, snap.time);\n      }\n\n      if (that.options.onTouchEnd) that.options.onTouchEnd.call(that, e);\n      return;\n    }\n\n    that._resetPos(200);\n    if (that.options.onTouchEnd) that.options.onTouchEnd.call(that, e);\n  },\n  \n  _resetPos: function (time) {\n    var that = this,\n      resetX = that.x >= 0 ? 0 : that.x < that.maxScrollX ? that.maxScrollX : that.x,\n      resetY = that.y >= that.minScrollY || that.maxScrollY > 0 ? that.minScrollY : that.y < that.maxScrollY ? that.maxScrollY : that.y;\n\n    if (resetX == that.x && resetY == that.y) {\n      if (that.moved) {\n        that.moved = false;\n        if (that.options.onScrollEnd) that.options.onScrollEnd.call(that);    // Execute custom code on scroll end\n      }\n\n      if (that.hScrollbar && that.options.hideScrollbar) {\n        if (vendor == 'webkit') that.hScrollbarWrapper.style[transitionDelay] = '300ms';\n        that.hScrollbarWrapper.style.opacity = '0';\n      }\n      if (that.vScrollbar && that.options.hideScrollbar) {\n        if (vendor == 'webkit') that.vScrollbarWrapper.style[transitionDelay] = '300ms';\n        that.vScrollbarWrapper.style.opacity = '0';\n      }\n\n      return;\n    }\n\n    that.scrollTo(resetX, resetY, time || 0);\n  },\n\n  _wheel: function (e) {\n    var that = this,\n      wheelDeltaX, wheelDeltaY,\n      deltaX, deltaY,\n      deltaScale;\n\n    if ('wheelDeltaX' in e) {\n      wheelDeltaX = e.wheelDeltaX / 12;\n      wheelDeltaY = e.wheelDeltaY / 12;\n    } else if('wheelDelta' in e) {\n      wheelDeltaX = wheelDeltaY = e.wheelDelta / 12;\n    } else if ('detail' in e) {\n      wheelDeltaX = wheelDeltaY = -e.detail * 3;\n    } else {\n      return;\n    }\n    \n    if (that.options.wheelAction == 'zoom') {\n      deltaScale = that.scale * Math.pow(2, 1/3 * (wheelDeltaY ? wheelDeltaY / Math.abs(wheelDeltaY) : 0));\n      if (deltaScale < that.options.zoomMin) deltaScale = that.options.zoomMin;\n      if (deltaScale > that.options.zoomMax) deltaScale = that.options.zoomMax;\n      \n      if (deltaScale != that.scale) {\n        if (!that.wheelZoomCount && that.options.onZoomStart) that.options.onZoomStart.call(that, e);\n        that.wheelZoomCount++;\n        \n        that.zoom(e.pageX, e.pageY, deltaScale, 400);\n        \n        setTimeout(function() {\n          that.wheelZoomCount--;\n          if (!that.wheelZoomCount && that.options.onZoomEnd) that.options.onZoomEnd.call(that, e);\n        }, 400);\n      }\n      \n      return;\n    }\n    \n    deltaX = that.x + wheelDeltaX;\n    deltaY = that.y + wheelDeltaY;\n\n    if (deltaX > 0) deltaX = 0;\n    else if (deltaX < that.maxScrollX) deltaX = that.maxScrollX;\n\n    if (deltaY > that.minScrollY) deltaY = that.minScrollY;\n    else if (deltaY < that.maxScrollY) deltaY = that.maxScrollY;\n    \n    if (that.maxScrollY < 0) {\n      that.scrollTo(deltaX, deltaY, 0);\n    }\n  },\n  \n  _transitionEnd: function (e) {\n    var that = this;\n\n    if (e.target != that.scroller) return;\n\n    that._unbind(TRNEND_EV);\n    \n    that._startAni();\n  },\n\n\n  /**\n  *\n  * Utilities\n  *\n  */\n  _startAni: function () {\n    var that = this,\n      startX = that.x, startY = that.y,\n      startTime = Date.now(),\n      step, easeOut,\n      animate;\n\n    if (that.animating) return;\n    \n    if (!that.steps.length) {\n      that._resetPos(400);\n      return;\n    }\n    \n    step = that.steps.shift();\n    \n    if (step.x == startX && step.y == startY) step.time = 0;\n\n    that.animating = true;\n    that.moved = true;\n\n    // modify by jku > 성능  고도화를 위해서 return 구조를 if else 구조로 변경\n    if (that.options.useTransition) {\n      that._transitionTime(step.time);\n      that._pos(step.x, step.y);\n      that.animating = false;\n      if (step.time) that._bind(TRNEND_EV);\n      else that._resetPos(0);\n    } else {\n      animate = function () {\n        var now = Date.now(),\n          newX, newY;\n\n        if (now >= startTime + step.time) {\n          that._pos(step.x, step.y);\n          that.animating = false;\n          if (that.options.onAnimationEnd) that.options.onAnimationEnd.call(that);      // Execute custom code on animation end\n          that._startAni();\n        } else {\n          now = (now - startTime) / step.time - 1;\n          easeOut = m.sqrt(1 - now * now);\n          newX = (step.x - startX) * easeOut + startX;\n          newY = (step.y - startY) * easeOut + startY;\n          that._pos(newX, newY);\n          if (that.animating) that.aniTime = nextFrame(animate);  \n        }\n      };\n      animate();  \n    }\n  },\n\n  _transitionTime: function (time) {\n    time += 'ms';\n    this.scroller.style[transitionDuration] = time;\n    if (this.hScrollbar) this.hScrollbarIndicator.style[transitionDuration] = time;\n    if (this.vScrollbar) this.vScrollbarIndicator.style[transitionDuration] = time;\n  },\n\n  _momentum: function (dist, time, maxDistUpper, maxDistLower, size) {\n    var deceleration = 0.0006,\n      speed = m.abs(dist) / time,\n      newDist = (speed * speed) / (2 * deceleration),\n      newTime = 0, outsideDist = 0;\n\n    // Proportinally reduce speed if we are outside of the boundaries\n    if (dist > 0 && newDist > maxDistUpper) {\n      outsideDist = size / (6 / (newDist / speed * deceleration));\n      maxDistUpper = maxDistUpper + outsideDist;\n      speed = speed * maxDistUpper / newDist;\n      newDist = maxDistUpper;\n    } else if (dist < 0 && newDist > maxDistLower) {\n      outsideDist = size / (6 / (newDist / speed * deceleration));\n      maxDistLower = maxDistLower + outsideDist;\n      speed = speed * maxDistLower / newDist;\n      newDist = maxDistLower;\n    }\n\n    newDist = newDist * (dist < 0 ? -1 : 1);\n    newTime = speed / deceleration;\n\n    return { dist: newDist, time: m.round(newTime) };\n  },\n\n  _offset: function (el) {\n    var left = -el.offsetLeft,\n      top = -el.offsetTop;\n      \n    while (el = el.offsetParent) {\n      left -= el.offsetLeft;\n      top -= el.offsetTop;\n    }\n    \n    if (el != this.wrapper) {\n      left *= this.scale;\n      top *= this.scale;\n    }\n\n    return { left: left, top: top };\n  },\n\n  _snap: function (x, y) {\n    var that = this,\n      i, l,\n      page, time,\n      sizeX, sizeY;\n\n    // Check page X\n    page = that.pagesX.length - 1;\n    for (i=0, l=that.pagesX.length; i<l; i++) {\n      if (x >= that.pagesX[i]) {\n        page = i;\n        break;\n      }\n    }\n    if (page == that.currPageX && page > 0 && that.dirX < 0) page--;\n    x = that.pagesX[page];\n    sizeX = m.abs(x - that.pagesX[that.currPageX]);\n    sizeX = sizeX ? m.abs(that.x - x) / sizeX * 500 : 0;\n    that.currPageX = page;\n\n    // Check page Y\n    page = that.pagesY.length-1;\n    for (i=0; i<page; i++) {\n      if (y >= that.pagesY[i]) {\n        page = i;\n        break;\n      }\n    }\n    if (page == that.currPageY && page > 0 && that.dirY < 0) page--;\n    y = that.pagesY[page];\n    sizeY = m.abs(y - that.pagesY[that.currPageY]);\n    sizeY = sizeY ? m.abs(that.y - y) / sizeY * 500 : 0;\n    that.currPageY = page;\n\n    // Snap with constant speed (proportional duration)\n    time = m.round(m.max(sizeX, sizeY)) || 200;\n\n    return { x: x, y: y, time: time };\n  },\n\n  _bind: function (type, el, bubble) {\n    // modify by jku \n    //(el || this.scroller).addEventListener(type, this, !!bubble);\n    (el || this.wrapper).addEventListener(type, this, !!bubble);\n  },\n\n  _unbind: function (type, el, bubble) {\n    // modify by jku\n    //(el || this.scroller).removeEventListener(type, this, !!bubble);\n    (el || this.wrapper).removeEventListener(type, this, !!bubble);\n  },\n\n\n  /**\n  *\n  * Public methods\n  *\n  */\n  destroy: function () {\n    var that = this;\n\n    that.scroller.style[transform] = '';\n\n    // Remove the scrollbars\n    that.hScrollbar = false;\n    that.vScrollbar = false;\n    that._scrollbar('h');\n    that._scrollbar('v');\n\n    // Remove the event listeners\n    that._unbind(RESIZE_EV, window);\n    that._unbind(START_EV);\n    that._unbind(MOVE_EV, window);\n    that._unbind(END_EV, window);\n    that._unbind(CANCEL_EV, window);\n    \n    if (!that.options.hasTouch) {\n      that._unbind('DOMMouseScroll');\n      that._unbind('mousewheel');\n    }\n    \n    if (that.options.useTransition) that._unbind(TRNEND_EV);\n    \n    if (that.options.checkDOMChanges) clearInterval(that.checkDOMTime);\n    \n    if (that.options.onDestroy) that.options.onDestroy.call(that);\n  },\n\n  refresh: function () {\n    var that = this,\n      offset,\n      i, l,\n      els,\n      pos = 0,\n      page = 0;\n\n    if (that.scale < that.options.zoomMin) that.scale = that.options.zoomMin;\n    that.wrapperW = that.wrapper.clientWidth || 1;\n    that.wrapperH = that.wrapper.clientHeight || 1;\n\n    that.minScrollY = -that.options.topOffset || 0;\n    that.scrollerW = m.round(that.scroller.offsetWidth * that.scale);\n    that.scrollerH = m.round((that.scroller.offsetHeight + that.minScrollY) * that.scale);\n    that.maxScrollX = that.wrapperW - that.scrollerW;\n    that.maxScrollY = that.wrapperH - that.scrollerH + that.minScrollY;\n    that.dirX = 0;\n    that.dirY = 0;\n\n    if (that.options.onRefresh) that.options.onRefresh.call(that);\n\n    that.hScroll = that.options.hScroll && that.maxScrollX < 0;\n    that.vScroll = that.options.vScroll && (!that.options.bounceLock && !that.hScroll || that.scrollerH > that.wrapperH);\n\n    that.hScrollbar = that.hScroll && that.options.hScrollbar;\n    that.vScrollbar = that.vScroll && that.options.vScrollbar && that.scrollerH > that.wrapperH;\n\n    offset = that._offset(that.wrapper);\n    that.wrapperOffsetLeft = -offset.left;\n    that.wrapperOffsetTop = -offset.top;\n\n    // Prepare snap\n    if (typeof that.options.snap == 'string') {\n      that.pagesX = [];\n      that.pagesY = [];\n      els = that.scroller.querySelectorAll(that.options.snap);\n      for (i=0, l=els.length; i<l; i++) {\n        pos = that._offset(els[i]);\n        pos.left += that.wrapperOffsetLeft;\n        pos.top += that.wrapperOffsetTop;\n        that.pagesX[i] = pos.left < that.maxScrollX ? that.maxScrollX : pos.left * that.scale;\n        that.pagesY[i] = pos.top < that.maxScrollY ? that.maxScrollY : pos.top * that.scale;\n      }\n    } else if (that.options.snap) {\n      that.pagesX = [];\n      while (pos >= that.maxScrollX) {\n        that.pagesX[page] = pos;\n        pos = pos - that.wrapperW;\n        page++;\n      }\n      if (that.maxScrollX%that.wrapperW) that.pagesX[that.pagesX.length] = that.maxScrollX - that.pagesX[that.pagesX.length-1] + that.pagesX[that.pagesX.length-1];\n\n      pos = 0;\n      page = 0;\n      that.pagesY = [];\n      while (pos >= that.maxScrollY) {\n        that.pagesY[page] = pos;\n        pos = pos - that.wrapperH;\n        page++;\n      }\n      if (that.maxScrollY%that.wrapperH) that.pagesY[that.pagesY.length] = that.maxScrollY - that.pagesY[that.pagesY.length-1] + that.pagesY[that.pagesY.length-1];\n    }\n\n    // Prepare the scrollbars\n    that._scrollbar('h');\n    that._scrollbar('v');\n\n    if (!that.zoomed) {\n      that.scroller.style[transitionDuration] = '0';\n      that._resetPos(400);\n    }\n  },\n\n  scrollTo: function (x, y, time, relative) {\n    var that = this,\n      step = x,\n      i, l;\n\n    that.stop();\n\n    if (!step.length) step = [{ x: x, y: y, time: time, relative: relative }];\n    \n    for (i=0, l=step.length; i<l; i++) {\n      if (step[i].relative) { step[i].x = that.x - step[i].x; step[i].y = that.y - step[i].y; }\n      that.steps.push({ x: step[i].x, y: step[i].y, time: step[i].time || 0 });\n    }\n\n    that._startAni();\n  },\n\n  scrollToElement: function (el, time) {\n    var that = this, pos;\n    el = el.nodeType ? el : that.scroller.querySelector(el);\n    if (!el) return;\n\n    pos = that._offset(el);\n    pos.left += that.wrapperOffsetLeft;\n    pos.top += that.wrapperOffsetTop;\n\n    pos.left = pos.left > 0 ? 0 : pos.left < that.maxScrollX ? that.maxScrollX : pos.left;\n    pos.top = pos.top > that.minScrollY ? that.minScrollY : pos.top < that.maxScrollY ? that.maxScrollY : pos.top;\n    time = time === undefined ? m.max(m.abs(pos.left)*2, m.abs(pos.top)*2) : time;\n\n    that.scrollTo(pos.left, pos.top, time);\n  },\n\n  scrollToPage: function (pageX, pageY, time) {\n    var that = this, x, y;\n    \n    time = time === undefined ? 400 : time;\n\n    if (that.options.onScrollStart) that.options.onScrollStart.call(that);\n\n    if (that.options.snap) {\n      pageX = pageX == 'next' ? that.currPageX+1 : pageX == 'prev' ? that.currPageX-1 : pageX;\n      pageY = pageY == 'next' ? that.currPageY+1 : pageY == 'prev' ? that.currPageY-1 : pageY;\n\n      pageX = pageX < 0 ? 0 : pageX > that.pagesX.length-1 ? that.pagesX.length-1 : pageX;\n      pageY = pageY < 0 ? 0 : pageY > that.pagesY.length-1 ? that.pagesY.length-1 : pageY;\n\n      that.currPageX = pageX;\n      that.currPageY = pageY;\n      x = that.pagesX[pageX];\n      y = that.pagesY[pageY];\n    } else {\n      x = -that.wrapperW * pageX;\n      y = -that.wrapperH * pageY;\n      if (x < that.maxScrollX) x = that.maxScrollX;\n      if (y < that.maxScrollY) y = that.maxScrollY;\n    }\n\n    that.scrollTo(x, y, time);\n  },\n\n  disable: function () {\n    this.stop();\n    this._resetPos(0);\n    this.enabled = false;\n\n    // If disabled after touchstart we make sure that there are no left over events\n    this._unbind(MOVE_EV, window);\n    this._unbind(END_EV, window);\n    this._unbind(CANCEL_EV, window);\n  },\n  \n  enable: function () {\n    this.enabled = true;\n  },\n  \n  stop: function () {\n    if (this.options.useTransition) this._unbind(TRNEND_EV);\n    else cancelFrame(this.aniTime);\n    this.steps = [];\n    this.moved = false;\n    this.animating = false;\n  },\n  \n  zoom: function (x, y, scale, time) {\n    var that = this,\n      relScale = scale / that.scale;\n\n    if (!that.options.useTransform) return;\n\n    that.zoomed = true;\n    time = time === undefined ? 200 : time;\n    x = x - that.wrapperOffsetLeft - that.x;\n    y = y - that.wrapperOffsetTop - that.y;\n    that.x = x - x * relScale + that.x;\n    that.y = y - y * relScale + that.y;\n\n    that.scale = scale;\n    that.refresh();\n\n    that.x = that.x > 0 ? 0 : that.x < that.maxScrollX ? that.maxScrollX : that.x;\n    that.y = that.y > that.minScrollY ? that.minScrollY : that.y < that.maxScrollY ? that.maxScrollY : that.y;\n\n    that.scroller.style[transitionDuration] = time + 'ms';\n    that.scroller.style[transform] = 'translate(' + that.x + 'px,' + that.y + 'px) scale(' + scale + ')' + translateZ;\n    that.zoomed = false;\n  },\n  \n  isReady: function () {\n    return !this.moved && !this.zoomed && !this.animating;\n  }\n};\n\nfunction prefixStyle (style) {\n  if ( vendor === '' ) return style;\n\n  style = style.charAt(0).toUpperCase() + style.substr(1);\n  return vendor + style;\n}\n\ndummyStyle = null;  // for the sake of it\n\nif (typeof exports !== 'undefined') exports.iScroll = iScroll;\nelse window.iScroll = iScroll;\n\n})(window, document);\n","/**\n * color info class\n * @name  Color\n * @version  0.1.0\n * @author  trustyoo86@linkit.kr\n */\n\nexport default {\n  /**\n   * is hex\n   * @param  {String}  str string\n   * @return {Boolean} isHex is hex string\n   */\n  isHex(str) {\n    let isHex = false;\n\n    if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(str)){\n      isHex = true;\n    } else {\n      isHex = false;\n    }\n\n    return isHex;\n  },\n\n  /**\n   * hex to rgba string\n   * @param  {String} hex     hex string\n   * @param  {Number} opacity opacity\n   */\n  hexToRgba(hex, opacity) {\n    var c;\n    if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)){\n      c= hex.substring(1).split('');\n      if(c.length== 3){\n        c= [c[0], c[0], c[1], c[1], c[2], c[2]];\n      }\n      c= '0x'+c.join('');\n      return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',' + (opacity || 0.5) + ')';\n    } else {\n      throw new Error('Bad Hex'); \n    }\n  }\n}","/**\n * Element Base\n * @name  Base\n * @class  Base\n * @example\n *  import Base from './base';\n * \n *  class Path extends Base {\n *    constructor(option) {\n *      super.initialize(option);\n *    }\n *  }\n * \n */\nclass Base {\n  /**\n   * 객체 옵션에 따른 초기화를 한다.\n   * @memberof Base\n   * @function intialize\n   * @param {Object} opt shape의 옵션\n   */\n  initialize(opt) {\n    let option = opt || {};\n\n    /**\n     * element의 id\n     * @property id\n     * @type {String}\n     */\n    this.id = option.id;\n    /**\n     * element의 이름\n     * @property name\n     * @type {String}\n     */\n    this.name = option.name || 'unnamed';\n    /**\n     * element에 그려지는 layer 객체\n     * @property layer\n     * @type {Object}\n     */\n    this.layer = option.layer;  // layer\n    /**\n     * element를 control 하기 위한 jQuery base element\n     * @property controlBase\n     * @type {Object}\n     */\n    this.controlBase = option.controlBase;  // text layer\n    /**\n     * shape가 포함되는 group의 id\n     * @property group\n     * @type {String}\n     */\n    this.group = option.group.id;  // group\n    /**\n     * shape를 칠하기 위한 색\n     * @property fill\n     * @type {String}\n     */\n    this.fill = option.fill || '#bdbdbd'; // fill\n    /**\n     * shape의 테두리 색\n     * @property stroke\n     * @type {String}\n     */\n    this.stroke = option.stroke || '#000000'; // stroke\n    /**\n     * shape의 테두리 두께\n     * @property strokeWidth\n     * @type {Number}\n     */\n    this.strokeWidth = option.strokeWidth || 1;\n    /**\n     * polygon인 경우 shape를 그리기 위한 path position 배열\n     * @property paths\n     * @type {Array}\n     */\n    this.paths = option.paths || [];  // path array\n    /**\n     * shape를 그리기 위한 x 좌표\n     * @property posx\n     * @type {Number}\n     */\n    this.posx = option.posx;  // center x\n    /**\n     * shape를 그리기 위한 y 좌표\n     * @property posy\n     * @type {Number}\n     */\n    this.posy = option.posy;  // center y\n    /**\n     * shape의 넓이값\n     * @property width\n     * @type {Number}\n     */\n    this.width = option.width;  // width\n    /**\n     * shape의 높이값\n     * @property height\n     * @type {Number}\n     */\n    this.height = option.height;  // height\n    /**\n     * control base에 shape의 이름을 표시하기 위한 여부\n     * @property showText\n     * @type {Boolean}\n     */\n    this.showText = option.showText || true;  // show text\n    /**\n     * html로 shape의 이름 영역을 그리는 경우 사용하는 변수\n     * @property textHtml\n     * @type {String}\n     */\n    this.textHtml = option.textHtml;  // text html\n    /**\n     * polygon인 경우 시작점 x 좌표\n     * @property x1\n     * @type {Number}\n     */\n    this.x1 = option.x1; // x1\n    /**\n     * polygon인 경우 종착점 x 좌표\n     * @property x2\n     * @type {Number}\n     */\n    this.x2 = option.x2; // x2\n    /**\n     * polygon인 경우 시작점 y 좌표\n     * @property y1\n     * @type {Number}\n     */\n    this.y1 = option.y1; // y1\n    /**\n     * polygon인 경우 종착점 y 좌표\n     * @property y2\n     * @type {Number}\n     */\n    this.y2 = option.y2; // y2\n\n    if (this.type === 'polygon') {\n      /**\n       * 중앙점 x 좌표\n       * @property centerx\n       * @type {Number}\n       */\n      this.centerx = this.posx;\n      /**\n       * 중앙점 y 좌표\n       * @property centery\n       * @type {Number}\n       */\n      this.centery = this.posy;\n    } else {\n      /**\n       * 중앙점 x 좌표\n       * @property centerx\n       * @type {Number}\n       */\n      this.centerx = this.posx + (this.width / 2);\n      /**\n       * 중앙점 y 좌표\n       * @property centery\n       * @type {Number}\n       */\n      this.centery = this.posy + (this.height / 2);\n    }\n  }\n\n  /**\n   * x,y좌표 넓이,높이 정보를 한번에 조회한다.\n   * @memberof Base\n   * @function getTotalInfo\n   * @returns {Object} 종합 정보\n   * @return {Number} x x좌표\n   * @return {Number} y y좌표\n   * @return {Number} width 넓이\n   * @return {Number} height 높이\n   */\n  getTotalInfo() {\n    return {\n      x: this.posx,\n      y: this.posy,\n      width: this.width,\n      height: this.height\n    };\n  }\n\n  /**\n   * 사이즈 정보를 조회한다.\n   * @memberof Base\n   * @function getSize\n   * @returns {Object} 사이즈 정보\n   * @return {Number} width 넓이\n   * @return {Number} height 높이\n   */\n  getSize() {\n    return {\n      width: this.width,\n      height: this.height\n    };\n  }\n\n  /**\n   * 위치 정보를 가져온다.\n   * @memberof Base\n   * @function getPosition\n   * @returns {Object} 위치 정보\n   * @return {Number} x x 좌표\n   * @return {Number} y y 좌표\n   */\n  getPosition() {\n    return {\n      x: this.posx,\n      y: this.posy\n    };\n  }\n\n  /**\n   * 중심 좌표를 반환한다.\n   * @memberof Base\n   * @function getCenterPosition\n   * @return {Number} x center x position\n   * @return {Number} y center y position\n   */\n  getCenterPosition() {\n    return {\n      x: this.centerx,\n      y: this.centery\n    };\n  }\n\n  /**\n   * 텍스트 정보를 반환한다.\n   * @memberof Base\n   * @function getTextInfo\n   * @return {Number} x text x\n   * @return {Number} y text y\n   * @return {String} label label string\n   */\n  getTextPosition() {\n    return {\n      x: this.posx,\n      y: this.posy,\n      label: ''\n    };\n  }\n}\n\nexport default Base;","import Base from '../base';\nimport Color from '../../color';\nimport Event from '../../events';\n\nclass ImageShape extends Base {\n    constructor(opt, ctx, isRender) {\n        super.initialize(opt);\n        const self = this;\n        let controllerStr = '<div class=\"shape-controller\" id=\"control-' + this.id + '\" ' +\n            'style=\"position:absolute;padding:5px;\">' +\n            ' <div class=\"controller-wrapper\" style=\"position:relative;width:100%;height:100%;border:1px solid #6799FF;\">' +\n            '   <div class=\"handler\" handler-type=\"lt\" style=\"cursor:nw-resize;width:5px;height:5px;background:#6799FF;position:absolute;left:0px;top:0px;\"></div>' +\n            '   <div class=\"handler\" handler-type=\"lb\" style=\"cursor:sw-resize;width:5px;height:5px;background:#6799FF;position:absolute;left:0px;bottom:0px;\"></div>' +\n            '   <div class=\"handler\" handler-type=\"rt\" style=\"cursor:ne-resize;width:5px;height:5px;background:#6799FF;position:absolute;right:0px;top:0px;\"></div>' +\n            '   <div class=\"handler\" handler-type=\"rb\" style=\"cursor:se-resize;width:5px;height:5px;background:#6799FF;position:absolute;right:0px;bottom:0px;\"></div>' +\n            ' </div>' +\n            '</div>';\n\n        // 타입 바인딩\n        this.type = 'image';\n\n        // width값이 없는 경우\n        if (!opt.width) {\n            this.width = 25;\n        }\n        // height 값이 없는 경우\n        if (!opt.height) {\n            this.height = 25;\n        }\n\n\n        /**\n         * shape를 제어할 controller\n         * @property controller\n         * @type {Object}\n         */\n        this.controller = $(controllerStr);\n\n        this.textObj = $('<span class=\"text-obj\"></span>')\n            .css({\n                position: 'absolute',\n                padding: 2,\n                'border-radius': 5,\n                'font-size': 10,\n                'pointer-events': 'none',\n                'font-weight': 'normal',\n                'text-align': 'center',\n                'color': '#ffffff',\n                'background-color': '#000000',\n            });\n\n        if (!opt.image) {\n            let image = new Image();\n\n            image.onload = () => {\n                self.image = image;\n\n                if (isRender) {\n                    self.render(ctx);\n                }\n            };\n            image.src = opt.url;\n        } else {\n            // image 객체 바인딩\n            this.image = opt.image;\n            if (isRender) {\n                self.render(ctx);\n            }\n        }\n    }\n\n    /**\n     * 오브젝트를 그린다.\n     * @memberof Image\n     * @function render\n     * @param {Object} opt 렌더링 옵션\n     */\n    render(ctx) {\n\n        ctx.drawImage(this.image, this.posx, this.posy, this.width, this.height);\n\n        this.addText();\n    }\n\n    /**\n     * text를 추가한다.\n     * @memberof Image\n     * @function addText\n     */\n    addText() {\n        const self = this;\n        let textArea = this.controlBase;\n\n        if (this.showText) {\n            if (this.textHtml) {\n                this.textObj = $(this.textHtml);\n            } else {\n                this.textObj\n                    .attr('id', 'text-' + this.id)\n                    .attr('group-id', this.group)\n                    .text(this.name || 'unnamed')\n                    .css({\n                        left: (this.posx + (this.width / 2)) - (this.textObj.width() / 2),\n                        top: this.posy + this.height + 5\n                    });\n            }\n\n            let timer = setTimeout(() => {\n                clearTimeout(timer);\n                textArea.append(self.textObj);\n            }, 100);\n        }\n    }\n\n    /**\n     * shape 정보를 변경한다.\n     * @memberof Image\n     * @function modifyShape\n     * @param {Object} opt 옵션 정보\n     * @param {Function} callback 콜백 함수\n     */\n    modifyShape(opt, callback) {\n        this.posx = opt.left;\n        this.posy = opt.top;\n\n        if (opt.width) {\n            this.width = opt.width;\n        }\n\n        if (opt.height) {\n            this.height = opt.height;\n        }\n\n        // center position 설정\n        this.centerx = this.posx + this.width / 2;\n        this.centery = this.posy + this.height / 2;\n\n        typeof callback == 'function' && callback();\n    }\n\n    /**\n     * 해당 객체를 선택 상태로 놓는다.\n     * @memberof Image\n     * @function select\n     */\n    select(resizeOpt, dndOpt) {\n        const self = this;\n\n        this.controller\n            .css({\n                width: this.width + 10,\n                height: this.height + 10,\n                left: this.posx - 5, // 5만큼 크게 잡기\n                top: this.posy - 5 // 5만큼 크게 잡고 나머지 위치 조정\n            });\n\n        // control base에 controller를 배치한다.\n        self.controlBase\n            .append(this.controller);\n    }\n\n    /**\n     * 해당 객체를 선택 해제 상태로 놓는다.\n     * @memberof Image\n     * @function unSelect\n     */\n    unSelect() {\n        this.controller.remove();\n    }\n\n    /**\n     * 이미지 정보를 반환한다.\n     * @memberof Image\n     * @function getImage\n     * @return {Object} this.image\n     */\n    getImage() {\n        return this.image;\n    }\n}\n\nexport default ImageShape;","/**\n * 객체간 링크\n * @name Link\n */\nclass Link {\n  constructor(opt) {\n    Object.assign(this, opt);\n\n    if (!opt.stroke) {\n      this.stroke = '#6799FF';\n    }\n\n    if (!opt.strokeWidth) {\n      this.strokeWidth = 2;\n    }\n\n    if (!opt.strokeStyle) {\n      this.strokeStyle = 'full';\n    }\n\n    if (!opt.strokeDash) {\n      this.strokeDash = 1;\n    }\n  }\n\n  /**\n   * 라인을 그린다.\n   * @memberof Link\n   * @function render\n   * @param {Object} opt option object\n   */\n  render(ctx, callback) {\n    ctx.beginPath();\n\n    // move & line\n    ctx.moveTo(this.sx, this.sy);\n    ctx.lineTo(this.ex, this.ey);\n\n    // begin path\n    ctx.strokeStyle = this.stroke;\n    ctx.lineWidth = this.strokeWidth;\n\n    // stroke end\n    ctx.stroke();\n\n    // close path\n    ctx.closePath();\n\n    typeof callback == 'function' && callback();\n    \n  }\n\n  /**\n   * 객체에 따른 position을 변경한다.\n   * @param {String} type type(시작 / 끝)\n   * @param {Object} shape target이 될 shape 객체\n   */\n  modifyPosition(type, x, y) {\n    const self = this;\n    \n    switch(type) {\n      case 'start':\n        self.sx = x;\n        self.sy = y;\n      break;\n      case 'end':\n        self.ex = x;\n        self.ey = y;\n      break;\n    }\n  }\n}\n\nexport default Link;","import Base from '../base';\nimport Color from '../../color';\n\nclass Polygon extends Base {\n  constructor(opt, ctx) {\n    super.initialize(opt);\n    // prev history data\n    this._prevData = {\n      paths: null,\n      fill: null,\n      stroke: null,\n      strokeWidth: null,\n      opacity: null\n    };\n\n    this.textObj = $('<span class=\"text-obj\"></span>')\n      .css({\n        position: 'absolute',\n        'pointer-events': 'none',\n        'font-size': 10,\n        'font-weight': 'normal',\n        'text-align': 'center',\n        'color': '#000000'\n      });\n    \n    // type 바인딩\n    this.type = 'polygon';\n\n    // hex일 경우 rgba로 변환\n    this.fill = Color.isHex(opt.fill) ? Color.hexToRgba(opt.fill, opt.opacity) : opt.fill;\n  }\n\n  /**\n   * rendering\n   * @memberof Polygon\n   * @function render\n   */\n  render(ctx) {\n    let paths = null,\n        fill = null,\n        stroke = null,\n        strokeWidth = null,\n        opacity = null;\n\n    // if opt.paths exist, save prev data\n    // variables binding\n    paths = this.paths;\n    fill = this.fill;\n    stroke = this.stroke;\n    strokeWidth = this.strokeWidth;\n\n    // set begin\n    ctx.beginPath();\n\n     // set stroke stype\n    ctx.strokeStyle = stroke;\n\n    // set stroke width\n    ctx.lineWidth = strokeWidth;\n\n    // path loop move and line to\n    paths.forEach((pos, idx) => {\n      switch(idx) {\n        case 0:\n          ctx.moveTo(pos.x, pos.y);\n        break;\n        default:\n          ctx.lineTo(pos.x, pos.y);\n        break;\n      }\n    });\n\n    // set fill style\n    ctx.fillStyle = Color.isHex(fill) ? Color.hexToRgba(fill, opacity) : fill;\n\n    // fill polygon\n    ctx.fill();\n\n     // set stroke    \n    ctx.stroke();\n\n    // close path\n    ctx.closePath();\n\n    this.addText();\n  }\n\n  /**\n   * text를 추가한다.\n   * @memberof Polygon\n   * @function addText\n   * @param {Object} opt \n   */\n  addText() {\n    let textArea = this.controlBase;\n\n    // text를 보여주는 경우\n    if (this.showText) {\n      // title이 html인 경우\n      if (this.textHtml) {\n        // textObj 변경\n        this.textObj = $(this.textHtml);\n      } else {\n        this.textObj\n          .attr('id', 'text-' + this.id)\n          .attr('group-id', this.group)\n          .empty().text(this.name || 'unnamed')\n          .css({\n            left: this.posx,\n            top: this.posy\n          });\n      }\n      textArea.append(this.textObj);\n    }\n  }\n\n  /**\n   * 선택상태에 놓는다.\n   * @memberof Polygon\n   * @function select\n   */\n  select() {\n    this._prevFill = this.fill;\n    this.fill = '#C90000';\n  }\n\n  /**\n   * 선택상태를 해제한다.\n   * @memberof Polygon\n   * @function unSelect\n   */\n  unSelect() {\n    if (this._prevFill) {\n      this.fill = this._prevFill;\n    }\n  }\n}\n\nexport default Polygon;","/**\n * Events object\n * @name Event\n * @version  0.1.0\n * @author  HanseungYoo(trustyoo86@linkit.kr)\n */\n\n/**\n * recognize mobile device event\n * @memberof Event\n * @function hasTouch\n */\nconst hasTouch = (() => {\n    let check = false;\n\n    (function(a) {\n        if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true\n    })(navigator.userAgent || navigator.vendor || window.opera);\n\n    return check;\n})();\n\n/**\n * get event position\n * @memberOf  Event\n * @function getEventPos\n * @param  {Object} evObj event object\n * @returns { Object } event position\n * @return { Number } x event position x\n * @return { Number } y event position y\n */\nconst getEventPos = (evObj) => {\n    let event = null;\n\n    if (hasTouch) {\n        // touch event인 경우 첫번째 이벤트 position만 반환\n        event = evObj.originalEvent.touches[0];\n    } else {\n        event = evObj;\n    }\n\n\n    return {\n        x: event.pageX ? parseInt(event.pageX) : 0,\n        y: event.pageY ? parseInt(event.pageY) : 0\n    };\n};\n\n/**\n * get event offset positoin\n * @memberOf  Event\n * @function getEventOffset\n * @param  {Object} evObj event object\n * @returns {Object} event offset object\n * @return {Number} x event offset x\n * @return {Number} y event offset y\n */\nconst getEventOffset = (evObj) => {\n    let event = null;\n\n    if (hasTouch) {\n        event = evObj.originalEvent.touches[0];\n    } else {\n        event = evObj;\n    }\n\n    return {\n        x: event.offsetX ? parseInt(event.offsetX) : 0,\n        y: event.offsetY ? parseInt(event.offsetY) : 0\n    };\n};\n\nexport default {\n    getEventPost: getEventPos,\n    getEventOffset: getEventOffset,\n    // const\n    HAS_TOUCH: hasTouch,\n    START: hasTouch ? 'touchstart' : 'mousedown', // drag start\n    MOVE: hasTouch ? 'touchmove' : 'mousemove', // drag move\n    END: hasTouch ? 'touchend' : 'mouseup', // drag end\n    CANCEL: hasTouch ? 'touchcancel' : 'mouseup', // drag cancel\n    CLICK: 'click', // click\n    DOUBLE_CLICK: 'dblclick', // double click\n    OVER: 'mouseover', // mouse over\n    OUT: 'mouseout', // mouse out\n    RESIZE: 'onorientationchange' in window ? 'orientationchange' : 'resize',\n    URL_CHANGE: 'onpopstate' in window ? 'popstate' : 'hashchange',\n    INPUT_CHECK: 'blur',\n    FILE_CHECK: 'change',\n    CHANGE: 'change',\n    REFRESH: 'refresh',\n    SELECT: 'select',\n    NOT_EXIST: 'notExist',\n    DRAG_START: 'dragStart',\n    DRAG_END: 'dragEnd',\n    API_COMPLETE: 'apiComplete',\n    LOAD_COMPLETE: 'loadComplete',\n    UPLOAD_COMPLETE: 'uploadComplete',\n    KEY: 'keypress',\n    ONLOAD: 'onload',\n    DISPLAY_CHANGE: 'onShowHide',\n    ZOOM_CHANGE: 'changeZoom',\n    DRAW_CLICK: 'click.draw',\n    DRAW_START: hasTouch ? 'touchstart.draw' : 'mousedown.draw',\n    DRAW_MOVE: hasTouch ? 'touchmove.draw' : 'mousemove.draw',\n    DRAW_END: hasTouch ? 'touchend.draw' : 'mouseup.draw',\n    getEventPos: getEventPos,\n    getEventOffset: getEventOffset\n};","'use strict';\n\nimport iScroll from '../lib/iscroll/iScroll-custom'; // iscroll\n\n// flaats utility\nimport Event from './events'; // events\nimport Layer from './layer';\nimport Selector from './selector';\n\n// array prototype min & max 설정\nArray.prototype.max = function() {\n\treturn Math.max.apply(null, this);\n};\n\nArray.prototype.min = function() {\n\treturn Math.min.apply(null, this);\n};\n\nvar iscroll = iScroll.iScroll;\n\nwindow.requestAnimFrame = (function(){\n  return  window.requestAnimationFrame       ||\n          window.webkitRequestAnimationFrame ||\n          window.mozRequestAnimationFrame    ||\n          window.oRequestAnimationFrame      ||\n          window.msRequestAnimationFrame     ||\n          function(/* function */ callback, /* DOMElement */ element){\n            window.setTimeout(callback, 1000 / 60);\n          };\n})();\n\nwindow.cancelRequestAnimFrame = (function(){\n    return  window.cancelAnimationFrame ||\n            window.webkitCancelRequestAnimationFrame ||\n            window.mozCancelRequestAnimationFrame ||\n            window.oCancelRequestAnimationFrame ||\n            window.msCancelRequestAnimationFrame ||\n            clearTimeout\n})();\n\n/**\n * Flaats\n * @name Flaats\n * @version  0.9.1\n * @author  HanseungYoo (trustyoo86@linkit.kr)\n * @example\n *   var map = new Flaats({\n *    // Draw canvas wrapper element query string\n *    base: '.map',\n *    // If you want to put an image in the background, write down the path.\n *    image: 'path/to/image',\n *    // The function to call after the canvas has been set.\n *    onInitialize: function (layer) {\n *    },\n *    // Put the layer you want to use into an array.\n *    layer: [\n *      {id: 'layer id', name: 'layer name'}\n *    ],\n *    // Zoom level step\n *    step: 4,\n *    // canvas scale\n *    scale: 0.5,\n *    // Zoom level\n *    zoomLevel: 0\n *   });\n */\nclass Flaats {\n  constructor(opt) {\n    this._palette = null; // palette\n    this._base = null; // base\n    this._scrollDiv = null; // scroll div\n    this._flaatsBase = null; // flaats base\n    this._layer = null; // layer\n    this._layerList = {}; // layer list\n    this._size = {  // size\n      width: 3000,  // width\n      height: 2000  // height\n    };\n    this._scale = null; // scale\n    this._zoomLevel = 0; // zoom level\n    this._step = 4; // step\n    this.mode = 'move'; // mode\n    this._controlLayer = null;\n    this.onInitialize = function () {}; //on initialize\n    this._selector = new Selector();  // selector\n    // shape\n    this._startPos = null;  // start position\n    this._polygon = null; // polygon\n    this._drawingPathArr = [];  // polygon path array\n\n    this._initialize(opt);\n  }\n\n  /**\n   * initialize\n   * @memberof Flaats\n   * @function _initialize\n   * @param {Object} opt option object\n   */\n  _initialize(opt) {\n    let self = this;\n\n    // this object binding\n    for (var key in opt) {\n      let val = opt[key];\n\n      switch(key) {\n        case 'base':\n          self._base = val;\n        break;\n        case 'layer':\n          self._layer = val;\n        break;\n        case 'size':\n          self._size = val;\n        break;\n        case 'step':\n          self._step = val;\n        break;\n        case 'zoomLevel':\n          self._zoomLevel = val;\n        break;\n        case 'scale':\n          self._scale = val;\n        break;\n        default:\n          self[key] = val;\n        break;\n      }\n    }\n\n    try {\n      if (opt.base) {\n        this._base = $(opt.base);\n\n        // base width, base height\n        let baseWidth = parseFloat(this._base.width()), //base width\n            baseHeight = parseFloat(this._base.height());  //base height\n\n        this.setBase(baseWidth, baseHeight, (layer) => {\n\n          let timer = setTimeout(function () {\n            clearTimeout(timer);\n            self.onInitialize(layer);\n          });\n          \n        });\n      } else {\n        throw 'base is not defined';\n      }\n    } catch (e) {\n      console.error(e.toString());\n    }\n  }\n\n  /**\n   * set base\n   * @memberof Flaats\n   * @function setBase\n   * @param {Number} width  base width\n   * @param {Number} height base height\n   * @param {Function} callback callback function\n   */\n  setBase(width, height, callback) {\n    let self = this,\n        setPalette = (imagePath, callback) => {\n          let baseTmplStr = '';\n\n          // map base setting\n          baseTmplStr = '<div class=\"map-base\" style=\"position:absolute;opacity:0.5;top:0px;left:0px;user-select:none;\">';\n\n          // if image path is exist\n          if (imagePath) {\n            baseTmplStr += '<img src=\"' + imagePath + '\" />';\n          }\n          // map base setting end\n          baseTmplStr += '</div>';\n\n          let baseTmpl = $(baseTmplStr)\n            .css({\n              width: self._size.width,\n              height: self._size.height\n            });\n\n          // append map base layer before map base removed\n          self._scrollDiv.find('.map-base').remove();\n          self._scrollDiv\n            .prepend(baseTmpl)\n            .css({\n              width: self._size.width,\n              height: self._size.height\n            });\n\n          // base setting\n          self._flaatsBase = baseTmpl;\n\n          // set base scroll using iscroll\n          self._scroll = new iscroll(self._base[0], {\n            zoomMin: 0.1,\n            hScrollbar: false,\n            vScrollbar: false,\n            bounce: false,\n            momentum: false,\n            lockDirection: false,\n            wheelAction: 'none'\n          });\n\n          // get base scale\n          var baseScale = parseFloat((1 / Math.max(self._size.width / width, self._size.height / height)).toFixed(3));\n\n          // if step is not number\n          if (typeof self._step != 'number') {\n            // set default step\n            self._step = 4;\n          }\n\n          // if scale is not number\n          if (typeof self._scale != 'number') {\n            self._scale = 1.5;\n          }\n\n          // zoom value initialize\n          self._zoomValue = [];\n\n          for (var idx=0; idx < self._step; idx++) {\n            if (idx == 0) {\n              self._zoomValue.push(baseScale);\n            } else {\n              self._zoomValue.push(parseFloat(baseScale * (idx * self._scale).toFixed(3)));\n            }\n          }\n\n          // map base의 zoom level이 설정되지 않는 경우\n          if (self._zoomValue[self._zoomLevel] == void 0) {\n            // default의 zoomlevel을 설정\n            self._zoomLevel = 0;\n          }\n\n          // set zoom\n          self.setZoom(self._zoomLevel, () => {\n            // if layer is not exist\n            if (!self._layer) {\n              // set default layer\n              self._layer = [\n                {\n                  id: 'common-layer',\n                  name: '공통 레이어',\n                  type: 'canvas'\n                }\n              ];\n            }\n\n            try {\n              // set layer loop\n              for (var idx=0; idx < self._layer.length; idx ++) {\n                var layer = self._layer[idx];\n\n                if (layer.id) {\n                  // add layer\n                  self.addLayer(layer.id, layer.name, layer.type, idx, () => {\n                    // if layer list\n                    if (self.getObjSize(self._layerList) == self._layer.length) {\n                      // trigger callback\n                      typeof callback == 'function' && callback(self._flaatsBase);\n                    }\n                  });\n                } else {\n                  throw 'layer.id is not exist.';\n                }                \n              }\n            } catch (e) {\n              console.error(e);\n              // trigger callback\n              typeof callback == 'function' && callback(self._flaatsBase);\n            }\n            \n          });\n        };\n\n    // append scrolldiv\n    if (!this._scrollDiv) {\n      this._scrollDiv = $('<div id=\"map-scroller\" class=\"map-view\" style=\"opacity:0;\"></div>');\n      this._base.append(this._scrollDiv);\n    }\n\n    try {\n      // image가 존재하는 경우\n      if (this.image) {\n        var image = new Image();\n\n        // image onload function\n        image.onload = () => {\n          // set base size using image width / height\n          self._size.width = image.width;\n          self._size.height = image.height;\n\n          // set base and set background images\n          setPalette(self.image, (layer) => {\n            // trigger callback\n            typeof callback == 'function' && callback(layer);\n          });\n        };\n\n        // image on error\n        image.onerror = (err) => {\n          throw err;\n        };\n\n        image.src = this.image;\n      } else {\n        setPalette(null, callback);\n      }\n    } catch (e) {\n      console.error('set canvas base error: ', e.toString());\n    }\n  }\n\n  /**\n   * object size를 체킹한다.\n   * @memberof Flaats\n   * @function getObjSize\n   * @param {Object} obj \n   * @return {Number} cnt object count\n   * @example\n   *  var flaats = new Flaats();\n   *  var obj = {a:1, b:2, c:3};\n   * \n   *  flaats.getObjSize(obj)  // 3\n   */\n  getObjSize(obj) {\n    var cnt = 0;\n\n    // object loop\n    for(var key in obj) {\n      cnt++;\n    }\n\n    return cnt;\n  }\n\n  /**\n   * element 방향으로 맵을 움직인다.\n   * @memberof Flaats\n   * @function moveToEl\n   * @param {String} layerId layer id\n   * @param {String} separatorName seperator name\n   * @param {String} id object id\n   * @example\n   *  var flaats = new Flaats();\n   * \n   *  flaats.moveToEl('common-layer', 'group', 1);\n   */\n  moveToEl(layerId, separatorName, id) {\n    let targetLayer = this.getLayer(layerId),\n        elInfo = targetLayer.getShape(separatorName, id);\n    \n    let scroller = this._scroll,\n        posx, posy, maxx, maxy;\n\n    // object에 따른 posx, posy 설정\n    switch(elInfo.type) {\n      // polygon인 경우\n      case 'polygon':\n        posx = (elInfo.posx * this._scroll.scale) - this._base.width() / 2;\n        posy = (elInfo.posy * this._scroll.scale) - this._base.height() / 2;\n      break;\n      // image인 경우\n      case 'image':\n        posx = (elInfo.posx * this._scroll.scale) - this._base.width() / 2;\n        posy = (elInfo.posy * this._scroll.scale) - this._base.height() / 2;\n      break;\n    }\n\n    // max x,y 설정\n    maxx = this._scroll.maxScrollX * -1;\n    maxy = this._scroll.maxScrollY * -1;\n\n    // posx, posy 설정\n    posx = posx < 0 ? 0 : posx;\n    posx = posx > maxx ? maxx : posx;\n    posy = posy < 0 ? 0 : posy;\n    posy = posy > maxy ? maxy : posy;\n\n    this.setZoom(2, () => {\n      // scrolling\n      scroller.scrollTo(-1 * posx, -1 * posy);\n    });\n  }\n\n  /**\n   * object들을 추가한다.\n   * @memberof Flaats\n   * @function addShape\n   * @param {String} layerId layerId\n   * @param {Object} list    오브젝트 정보 (array 또는 object)\n   */\n  addShape(layerId, list, callback) {\n    let listCnt = 0,\n        targetLayer = this.getLayer(layerId) || this.getLayer('common-layer');\n\n    // draw if target layer is exist.\n    if (targetLayer) {\n      // list가 array인 경우\n      if (list.length) {\n        // list 길이가 0 이상인 경우\n        if (list.length > 0) {\n          for (let idx=0; idx < list.length; idx++) {\n            let listItem = list[idx];\n\n            // 추가 형태인지 확인\n            let isAdd = targetLayer.addGroup(listItem, listItem.group);\n\n            // 추가가 가능한 경우\n            if (isAdd) {\n              listCnt ++;\n\n              // list cnt가 list 길이와 맞닿은 경우\n              if (listCnt == list.length) {\n                targetLayer.drawLayer(() => {\n                  typeof callback == 'function' && callback(false);\n                });\n              }\n            // error\n            } else {\n              typeof callback == 'function' && callback(false);\n            }\n          }\n        } else {\n          typeof callback == 'function' && callback(false);\n        }\n      } else {\n        // Object\n        // object가 빈객체가 아닌 경우\n        if (JSON.stringify(list) != '{}') {\n          for (let key in list) {\n            let listItem = list[key];\n\n            // get boolean\n            let isAdd = targetLayer.addGroup(listItem, listItem.group);\n\n            // success\n            if (isAdd) {\n              listCnt ++;\n\n              if (listCnt == Object.keys(list).length) {\n                targetLayer.drawLayer(() => {\n                  typeof callback == 'function' && callback(false);\n                });\n              }\n            // error\n            } else {\n              typeof callback == 'function' && callback(false);\n            }\n          }\n        } else {\n          typeof callback == 'function' && callback(false);\n        }\n      }\n    } else {\n      throw 'target layer is not defined';\n    }\n  }\n\n  /**\n   * 링크를 추가한다.\n   * @memberof Flaats\n   * @function initializeLink\n   * @param {String} layerId layer id\n   * @param {Array} linkInfo link 정보\n   * @param {Function} callback 링크 후의 callback function\n   */\n  addLink(layerId, linkInfo, opt, callback) {\n    let targetLayer = this.getLayer(layerId) || this.getLayer('common-layer');\n    \n    if (targetLayer) {\n      if (linkInfo.length) {\n        if (linkInfo.length > 0) {\n          targetLayer.addLink(linkInfo, opt, () => {\n            typeof callback == 'function' && callback(false);  \n          });\n        } else {\n          typeof callback == 'function' && callback(false);\n        }\n      } else {\n        if (JSON.stringify(linkInfo) != '{}') {\n          targetLayer.addLink(linkInfo, opt, () => {\n            typeof callback == 'function' && callback(false);\n          });\n        } else {\n          typeof callback == 'function' && callback(false);\n        }\n      }\n    } else {\n      throw 'target layer is not defined';\n    }    \n  }\n\n  /**\n   * set selector\n   * @memberof Flaats\n   * @function setSelector\n   * @param {Function} onSelected 선택 상태가 되었을 때의 function\n   */\n  setSelector(opt) {\n    let self = this,\n        doc = $(document);\n\n    let layer = self._controlLayer;\n\n    // 변수 sync 문제 발생 방지를 위해 객체 복사\n    let option = Object.assign({}, opt),\n        onSelected = option.onSelected || function () {};\n\n    // set control layer if z index is 1\n    if (!self._controlLayer) {\n      for (var layerId in self._layerList) {\n        let layerItem = self._layerList[layerId];\n\n        if (layerItem.zIndex == 1) {\n          layer = layerItem;\n        }\n      }\n    }\n\n    this._base.unbind(Event.START).bind(Event.START, (e) => {\n      e.stopPropagation();\n      layer.unselectShapeAll();\n\n      if (e.button != 0) {\n        return ;\n      }\n      \n      // select mode가 true인 경우\n      if (self._selectMode) {\n        if (!self._selector.enable || layer == void 0) {\n          return false;\n        }\n\n        // 셀렉터 시작\n        self._selector.start(layer.base, layer.layerObj, e, () => {});\n\n        // 드래그 중인 경우\n        doc.bind(Event.MOVE, (e) => {\n          e.stopPropagation();\n          self._selector.draw(layer.layerObj, e, () => {});\n        });\n\n        // 드래그가 끝난 경우\n        layer.base.one(Event.END, (ev) => {\n          ev.stopPropagation();\n          doc.unbind(Event.MOVE);\n\n          // selector end function을 호출한다.\n          self._selector.end(layer.layerObj, ev, (x,y,w,h) => {\n            // 소숫점을 제거한다. (퍼포먼스 및 계산)\n            let startx = Math.round(x),\n                starty = Math.round(y),\n                endx = startx + w,\n                endy = starty + h,\n                list = null;\n            \n            // 리스트를 받아온다.\n            list = layer.searchByPosition(startx, starty, endx, endy);\n            // 리스트에 대한 object를 변경한다.\n            // resize 및 dnd에 따른 function 을 전달한다.\n            layer.selectShape(list, opt.resize || {}, opt.dnd || {});\n            \n            typeof onSelected == 'function' && onSelected(list);\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * get zoom level\n   * @memberOf  Flaats\n   * @function getZoom\n   * @return {Number} this._zoomLevel zoom level\n   */\n  getZoom() {\n    return this._zoomLevel;\n  }\n\n  /**\n   * set zoom\n   * @memberof  Flaats\n   * @function setZoom\n   * @param {Number}   level    zoom level\n   * @param {Function} callback callback function\n   * @param {Number} time zoom delay\n   */\n  setZoom(level, callback, time) {\n    let scroller = this._scroll,\n        newScale = this._zoomValue[level];\n\n    if (newScale == scroller.scale) {\n      typeof callback == 'function' && callback(this._zoomLevel);\n    } else {\n      // get offset value\n      var offset = scroller._offset(scroller.wrapper),\n          x = scroller.wrapperW / 2 + offset.left,\n          y = scroller.wrapperH / 2 + offset.top;\n\n      // scroller zooming\n      scroller.zoom(x, y, newScale, time);\n\n      this.refresh();\n\n      typeof callback == 'function' && callback(this._zoomLevel);\n    }\n  }\n\n  /**\n   * map을 갱신한다.\n   * @memberof Flaats\n   * @function refresh\n   */\n  refresh() {\n    let base = this._base,\n        scroller = this._scroll,\n        parentW = base.width(),\n        parentH = base.height(),\n        scrollW = null,\n        scrollH = null,\n        x = null,\n        y = null,\n        scaleTimer = null;\n\n    // scroller refresh\n    scroller.refresh();\n\n    // set scroll width / height\n    scrollW = scroller.scrollerW;\n    scrollH = scroller.scrollerH;\n\n    // get x / y position\n    x = scroller.x > 0 ? 0 : scroller.x;\n    y = scroller.y > 0 ? 0 : scroller.y;\n\n    // set scroll div style    \n    this._scrollDiv.css({\n      // width: Math.min(parentW, scrollW),\n      'margin-top': Math.max((parentH - scrollH) / 2, 0),\n      'margin-left': Math.max((parentW - scrollW) / 2, 0)\n    });\n\n    // scroller scrolling\n    scroller.scrollTo(x, y);\n\n    // scroll div opacity set 1\n    if (this._scrollDiv.css('opacity') != 1) {\n      this._scrollDiv.css('opacity', 1);\n    }\n\n    // set timer scroller delay\n    scaleTimer = setTimeout(() => {\n      clearTimeout(scaleTimer);\n      scroller.refresh();\n    }, 100);\n  }\n\n  /**\n   * layer를 추가한다.\n   * @memberof Flaats\n   * @function addLayer\n   * @param {String}   layerId  layer id\n   * @param {String}   type     layer type\n   * @param {Function} callback callback function after layer setting\n   */\n  addLayer(layerId, name, type, index, callback) {\n    var divW = this._flaatsBase.css('width'),\n        divH = this._flaatsBase.css('height');\n\n    // layer object making\n    var layer = new Layer(this._scrollDiv, {\n      id: layerId,\n      name: name || layerId,\n      type: type,\n      width: divW,\n      height: divH,\n      zIndex: index\n    });\n\n    // layer list save\n    this._layerList[layerId] = layer;\n\n    // layer trigger callback\n    typeof callback == 'function' && callback(layer);\n  }\n\n  /**\n   * get layer\n   * @memberof Flaats\n   * @function getLayer\n   * @param  {String} layerId layer id\n   * @return {Object} layer   target layer\n   */\n  getLayer(layerId) {\n    return this._layerList[layerId];\n  }\n\n  /**\n   * get layer list\n   * @memberof Flaats\n   * @function getLayerList\n   * @return {Array}  this._layerList\n   */\n  getLayerList() {\n    return this._layerList;\n  }\n\n  /**\n   * 이벤트를 전체 해제한다.\n   * @memberof Flaats\n   * @function destroyEvent\n   * @param  {Function} callback callback function after destroy event\n   */\n  destroyEvent(callback) {\n    var doc = $(document),\n        layers = this._layerList;\n\n    for(var layerId in layers) {\n      let layer = layers[layerId];\n\n      // 각 변수들을 초기화 한다.\n      layer.initVariables();\n      // init한 후 layer를 다시 그린다.\n      layer.drawLayer();\n      let _scrollDiv = layer.base;\n\n      // control base의 pointer events를 비활성화 한다.\n      layer.controlBase\n        .css('pointer-events', 'none');\n      \n      layer.unselectShapeAll();\n\n      _scrollDiv.unbind(Event.DRAW_START);\n      _scrollDiv.unbind(Event.DRAW_MOVE);\n      _scrollDiv.unbind(Event.DRAW_END);\n      _scrollDiv.removeClass('drawing');\n    }\n\n    doc.unbind(Event.DRAW_MOVE);\n    doc.unbind(Event.MOVE);\n\n    this._base.removeClass('move');\n    this._base.removeClass('selector');\n    this._base.unbind(Event.START);\n    this._base.unbind(Event.end);\n\n    typeof callback == 'function' && callback();\n  }\n\n  /**\n   * 모드를 변경한다.\n   * @memberof Flaats\n   * @function changeMode\n   * @param  {String} modeName mode name\n   * @param {Object} opt option값 오브젝트\n   */\n  changeMode(modeName, opt) {\n    const self = this,\n          // sync 문제 발생할 수 있으므로, 객체를 복사\n          option = Object.assign({}, opt),\n          // shape가 선택 되었을 때\n          onShapeSelected = option.onSelected,\n          // mode가 끝났을때\n          callback = option.onChangeModeFinished;\n\n    switch(modeName) {\n      case 'move':\n        this.destroyEvent(() => {\n          self._selectMode = false;\n          // scroll enable\n          self._scroll.enable();\n          self._selector.enable = false;\n          self._base.addClass('move');\n        });\n      break;\n      case 'select':\n        this.destroyEvent(() => {\n          self._selectMode = true;\n          self._selector.enable = true;\n          self.setSelector(opt);\n          // scroll diable\n          self._scroll.disable();\n        });\n      break;\n      case 'none':\n        for (var layerId in this._layerList) {\n          let layer = this._layerList[layerId];\n          let _scrollDiv = layer.base;\n          _scrollDiv.removeClass('drawing');\n        }\n\n        this._base.removeClass('move');\n        this._selectMode = false;\n        self._selector.enable = false;\n        // scroll disable\n        this._scroll.disable();\n      break;\n    }\n\n    // callback function 호출 \n    typeof callback == 'function' && callback();\n  }\n\n  /**\n   * \n   * @param {Object} linkInfo link info\n   */\n  linkShape(linkInfo) {\n    const layerId = linkInfo.layerId;\n    let info = Object.assign({}, linkInfo);\n    let targetLayer;\n\n    // layer id가 존재하지 않는 경우\n    if (!layerId) {\n      let layerList = this.getLayerList();\n\n      for(var id in layerList) {\n        let layer = layerList[id];\n\n        if (layer.zIndex == 1) {\n          targetLayer = layer;\n        }\n      }\n    } else {\n      targetLayer = this.getLayer(layerId);\n    }\n\n    // target이 있어야 하며, link 갯수가 0 이상이어야 한다.\n    if (info.target != void 0 && info.link.length > 0) {\n      targetLayer.linkShape(info.target, info.link, linkInfo.option || {});\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * object를 그린다.\n   * @memberof Flaats\n   * @function drawingObj\n   * @param {Object} opt object option\n   */\n  drawingShape(opt) {\n    let self = this,\n        layerBase = null,\n        doc = $(document);\n\n    let optObj = Object.assign({}, opt),\n        layerId = optObj.layerId ? optObj.layerId : null,\n        isSet = optObj.isSet ? optObj.isSet : true,\n        section = optObj.section ? optObj.section : null,\n        option = optObj.option ? optObj.option: {},\n        moveCallback = optObj.onDragMove || function () {},\n        callback = optObj.onFinished || function () {};\n\n    try {\n      if (!layerId) {\n        throw 'layer id is not defined';\n      } else {\n        // layer의 z-index 변경\n        this.changeIdx(layerId, (layer) => {\n          // layer base 추출\n          layerBase = layer.base;\n\n          layerBase.unbind(Event.DRAW_MOVE);\n          layerBase.unbind(Event.DRAW_END);\n\n          if (isSet && section) {\n            this._preMapMode = this.mode;\n            // mode를 none으로 변경한다.\n            this.changeMode('none');\n\n            /**\n             * 드래그 이동 이벤트\n             * @event DRAW_MOVE\n             */\n            layerBase.bind(Event.DRAW_MOVE, (ev) => {\n              let position = self.getBasePosition(ev);\n\n              layer.drawShape(position, option);\n              moveCallback(position);\n            });\n\n            layerBase.bind(Event.DRAW_END, (ev) => {\n              let endPosition = self.getBasePosition(ev);\n\n              layerBase.unbind(Event.DRAW_MOVE);\n              layer.addObj(endPosition, section, option, () => {\n                typeof callback == 'function' && callback(endPosition);\n                self.drawingShape(opt);\n              });\n            });\n          } else if (!isSet && section) {\n            optObj.isSet = true;\n            self.drawingShape(optObj);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('[setting object error]' + e);\n    }\n  }\n\n  /**\n   * polygon을 그린다.\n   * @memberof Flaats\n   * @function drawingPolygon\n   * @param  {Object}  opt     option\n   * @example\n   * \n   *  Flaats.setDrawing({\n   *    layerId: 'layer' // polygon을 그릴 layer id\n   *    isSet: true // setting 할지에 대한 여부(false인 경우 그리기 실행 불가)\n   *    section: 'group' // section에 대한 여부 section이 없는 경우 그리기 설정 불가\n   *    option: {\n   *      fill: '#000000',  // 채우기 색\n   *      stroke: '#000000', // 선 색\n   *      strokeWidth: 1, // 선 굵기\n   *      opacity: 1 // 투명도\n   *    },\n   *    onFinished: function (obj) {  // 그리기가 끝난 후 callback function\n   *    }\n   *  });\n   */\n  drawingPolygon(opt) {\n    let self = this,\n        layerBase = null,\n        doc = $(document);\n    \n    let optObj = Object.assign({}, opt),\n        layerId = optObj.layerId ? optObj.layerId : null, // layer id\n        isSet = optObj.isSet ? optObj.isSet : true, // is setting\n        sectionName = optObj.section ? optObj.section : null, // section name\n        option = optObj.option ? optObj.option : {},  // option\n        drawStartCallback = optObj.onDrawStart || function () {},\n        drawMoveCallback = optObj.onDraw || function () {},\n        callback = optObj.onFinished || function () {};  // on finished callback\n    \n    try {\n      if (!layerId) {\n        throw 'layer id is not defined';\n      } else {\n        // change layer index\n        this.changeIdx(layerId, (layer) => {\n          // layer base 추출\n          layerBase = layer.base;\n\n          // polygon이 존재하는 경우 기존 polygon 정보들 삭제\n          if (self._polygon) {\n            layer.remove(self._polygon);\n            self._polygon = null;\n            self._startPos = null;\n            self._drawingPathArr = [];\n          }\n\n          // 이벤트 해제\n          layerBase.unbind(Event.DRAW_START);\n          doc.unbind(Event.DRAW_MOVE);\n\n          // setting이 있는 경우 또는 section name이 존재하는 경우 그리기 실행\n          if (isSet && sectionName) {\n            layerBase.removeClass('drawing');\n            // pre map mode save\n            this._preMapMode = this.mode;\n            // change map mode none\n            this.changeMode('none');\n\n            // base add class drawing mode\n            layerBase.addClass('drawing');\n            // draw start event binding\n            layerBase.bind(Event.DRAW_START, (ev) => {\n              let pos = self.getBasePosition(ev),\n                  pathLen = self._drawingPathArr.length,\n                  isStart = pathLen == 0,\n                  isFinish = pathLen > 3\n                              && self._startPos != null\n                              && Math.sqrt(Math.pow(pos.x - self._startPos.x, 2) + Math.pow(pos.y - self._startPos.y, 2)) <= 3;\n\n              if (ev.button != 0) {\n                return ;\n              }\n\n              drawStartCallback(pos);\n\n              // if path length is 0\n              if (isStart) {\n                if (layer.type === 'canvas') {\n                  self._polygon = {};\n                } else {\n                  layer.editPolygon(self._polygon, [pos], option, false, false);  \n                }\n                \n                self._drawingPathArr.push(pos);\n                self._startPos = pos;\n\n                // document move event\n                doc.bind(Event.DRAW_MOVE, (ev) => {\n                  var movePos = self.getBasePosition(ev),\n                      distance = Math.sqrt(Math.pow(movePos.x - self._startPos.x, 2) + Math.pow(movePos.y - self._startPos.y, 2)),\n                      curLen = self._drawingPathArr.length;\n                  \n                  drawMoveCallback(movePos);\n                  \n                  // if finish position\n                  if (distance <= 3 && curLen > 3) {\n                    let pathArr = self._drawingPathArr;\n                    // path array push\n                    pathArr.push(self._startPos);\n                    // polygon add\n                    layer.editPolygon(self._polygon, self._drawingPathArr, option, true, false)\n                  } else {\n                    let paths = [];\n                    // finished였다가 아닌 경우 startpos에 해당하는 객체를 삭제한다.\n                    for(var idx=0; idx < self._drawingPathArr.length; idx++) {\n                      let path = self._drawingPathArr[idx];\n\n                      // array slice를 통해 삭제\n                      if (idx != 0 && path.x != self._startPos && path.y != self._startPos.y) {\n                        paths.push(path);\n                      } else if (idx == 0) {\n                        paths.push(path);\n                      }\n                    }\n\n                    self._drawingPathArr = paths;\n\n                    let pathArr = [...paths, movePos];\n\n                    // path array push\n                    // pathArr.push(movePos);\n                    // polygon drawing\n                    layer.editPolygon(self._polygon, pathArr, option, false, false)\n                  }\n                });\n              } else if (isFinish) {\n                // drawing path array push\n                self._drawingPathArr.push(self._startPos);\n                layer.addPolygon(self._polygon, self._drawingPathArr, sectionName, option, () => {\n                  console.log('option is: ', option);\n                  for(var key in option) {\n                    if (key != 'fill' && key != 'stroke' && key != 'strokeWidth' && key != 'opacity') {\n                      delete option[key];  \n                    }\n                  }\n\n                  typeof callback == 'function' && callback(pos);\n                  // drawingPolygon trigger\n                  self.drawingPolygon(opt);\n                });\n              } else {\n                self._drawingPathArr.push(pos);\n                layer.editPolygon(self._polygon, self._drawingPathArr, option, false, false);\n              }\n            });\n          } else if (!isSet && sectionName) {\n            optObj.isSet = true;\n            // drawing polygon trigger\n            this.drawingPolygon(optObj);\n          } else {\n            return false;\n          }\n        });\n      }\n    } catch (e) {\n\n    }\n    \n  }\n\n  /**\n   * layer를 show / hide 한다.\n   * @param {String} layerId layer id\n   * @param {Boolean} isShow show 할지 안할지에 대한 여부\n   */\n  controlLayerView(layerId, isShow) {\n    let targetLayer = this.getLayer(layerId);\n\n    // show 여부에 따른 show/hide\n    switch(isShow) {\n      case true:\n        targetLayer.showLayer();\n      break;\n      case false:\n        targetLayer.hideLayer();\n      break;\n    }\n  }\n\n  /**\n   * layer에 해당하는 group을 show / hide한다.\n   * @param {String} layerId layer id\n   * @param {String} groupId group id\n   * @param {Boolean} isShow show 할지에 대한 여부\n   */\n  controlGroupView(layerId, groupId, isShow) {\n    let targetLayer = this.getLayer(layerId);\n\n    switch(isShow) {\n      case true:\n        targetLayer.showGroup(groupId);\n      break;\n      case false:\n        targetLayer.hideGroup(groupId);\n      break;\n    }\n  }\n\n  /**\n   * layer에 해당하는 group을 삭제한다.\n   * @param {String} layerId layer id\n   * @param {String} groupId group id\n   * @param {Function} callback callback function\n   */\n  deleteGroup(layerId, groupId, callback) {\n    let targetLayer = this.getLayer(layerId);\n\n    // 해당 target layer에 group에 대한 정보를 삭제한다.\n    targetLayer.deleteGroup(groupId, () => {\n      typeof callback == 'function' && callback();\n    });\n  }\n\n  /**\n   * get base position\n   * @param  {Object} ev event object\n   * @return {x} base position x\n   * @return {y} base positoin y\n   */\n  getBasePosition(ev) {\n    let basePosX = ev.offsetX,\n        basePosY = ev.offsetY;\n\n    return {\n      x: parseInt(basePosX),\n      y: parseInt(basePosY)\n    };\n  }\n\n  /**\n   * change index\n   * @param  {String}   layerId  layer id\n   * @param  {Function} callback layer id change callback\n   */\n  changeIdx(layerId, callback) {\n    let targetLayer = this.getLayer(layerId),\n        // target layer that z-index is 1.\n        firstLayer = null;\n\n    for (var layerId in this._layerList) {\n      let layer = this._layerList[layerId];\n\n      if (layer.zIndex == 1) {\n        firstLayer = layer;\n      }\n    }\n\n    // if target layer is first layer\n    try {\n      if (targetLayer) {\n        if (targetLayer === firstLayer) {\n          typeof callback == 'function' && callback(targetLayer);\n        } else {\n          // change index\n          let copyIndex = targetLayer.zIndex;\n          targetLayer.changeIndex(firstLayer.zIndex);\n          firstLayer.changeIndex(copyIndex);\n          copyIndex = null;\n\n          this._controlLayer = targetLayer;\n\n          typeof callback == 'function' && callback(targetLayer);\n        }\n      } else {\n        throw 'target layer is empty.' + layerId;\n      }\n    } catch (e) {\n      console.error('change index error: ', e.toString());\n    }\n    \n  }\n  \n  /**\n   * 소멸자\n   * @memberof Flaats\n   * @function destroy\n   */\n  destroy() {\n    const self = this;\n\n    for(let layerId in this._layerList) {\n      let layer = self._layerList[layerId];\n      layer.destroy();\n    }\n\n    this._palette = null; // palette\n    this._base = null; // base\n    this._scrollDiv = null; // scroll div\n    this._flaatsBase = null; // flaats base\n    this._scale = null; // scale\n    this._zoomLevel = 0; // zoom level\n    this._step = 4; // step\n    this.mode = 'move'; // mode\n    this._controlLayer = null;\n    this.onInitialize = function () {}; //on initialize\n    this._selector = null;  // selector\n    // shape\n    this._startPos = null;  // start position\n    this._polygon = null; // polygon\n    this._drawingPathArr = [];  // polygon path array\n  }\n}\n\nif (module.exports) {\n  module.exports = Flaats;\n} else {\n  window.Flaats = Flaats;\n}\n\n\n\n","import Event from './events'; // events\nimport Color from './color'; // color\n\nimport Polygon from './element/canvas/polygon';\nimport ImageShape from './element/canvas/Image';\nimport Link from './element/canvas/Link';\n/**\n * Flaats layer\n * @name  Layer\n * @version  0.1.0\n * @author  HanseungYoo(trustyoo86@linkit.kr)\n */\nexport default class Layer {\n    /**\n     * Layer constructor\n     * @memberof Layer\n     * @param {Object} target layer를 렌더링할 대상 객체\n     * @param {Object} opt layer의 option값들을 포함한 객체\n     */\n    constructor(target, opt) {\n        /**\n         * layer를 그리기 위한 base element\n         * @property base\n         * @type {Object}\n         */\n        this.base = null; // base\n        /**\n         * 실제 레이어를 담당하고 있는 오브젝트 (svg / canvas)\n         * @property layerObj\n         * @type {Object}\n         */\n        this.layerObj = null; // layer object\n        /**\n         * 레이어의 이름\n         * @property name\n         * @type {String}\n         */\n        this.name = opt.name; // layer 이름\n        /**\n         * 레이어의 id 값\n         * @property layerObjId\n         * @type {String}\n         */\n        this.layerObjId = null;\n        /**\n         * 레이어의 타입\n         * svg 또는 canvas로 설정\n         * @property type\n         * @type {String}\n         */\n        this.type = opt.type || 'canvas'; // type\n        /**\n         * 레이어를 그리고, 베이스를 설정하기 위한 jQuery 타겟 element\n         * @property target\n         * @type {Object}\n         */\n        this.target = target; // target\n        /**\n         * 레이어 id\n         * @property layerId\n         * @type {String}\n         */\n        this.layerId = opt.id; // layer id\n        /**\n         * 레이어의 넓이\n         * @property width\n         * @type {Number}\n         */\n        this.width = parseFloat(opt.width); // width\n        /**\n         * 레이어의 높이\n         * @property height\n         * @type {Number}\n         */\n        this.height = parseFloat(opt.height); // height\n        /**\n         * 레이어의 z-index값\n         * 선택되는 레이어에 따라 z-index값을 교체함.\n         * 레이어의 z-index는 순서에 따라 결정됨\n         * @property zIndex\n         * @type {Number}\n         */\n        this.zIndex = opt.zIndex + 1; // z-index\n        /**\n         * 수정하고 있는 shape object\n         * @property editShape\n         * @type {Object}\n         */\n        this.editShape = null;\n        /**\n         * shape의 텍스트 또는 크기조정 controller를 바인딩 하기 위한 jQuery control element\n         * @property controlBase\n         * @type {Object}\n         */\n        this.controlBase = null;\n        // polygon\n        /**\n         * polygon을 그리고 있는 현재 객체 표시\n         * @property _drawPath\n         * @type {Object}\n         */\n        this._drawPath = null;\n        /**\n         * polygon을 그리기 위한 시작점\n         * @property _drawStartPos\n         * @type {Object}\n         */\n        this._drawStartPos = null;\n        /**\n         * polygon을 그리기 위한 포지션들을 가지고 있는 배열\n         * @property _editPathArr\n         * @type {Array}\n         */\n        this._editPathArr = [];\n\n        /**\n         * shape들을 저장하기 위한 단위. Object형태로 id를 key값 형태로 가지고 있음.\n         * @property _group\n         * @type {Object}\n         */\n        this._group = {};\n        /**\n         * shape가 추가될 경우, unique한 id를 생성하기 위한 변수\n         * @property _uniqueId\n         * @type {Number}\n         */\n        this._uniqueId = 0;\n\n        /**\n         * selector를 통해 선택된 shape의 리스트\n         * @property _selectedShape\n         * @type {Array}\n         */\n        this._selectedShape = [];\n\n        /**\n         * 편집 상태에서 image shape를 표현하기 위해서 필요한 image url\n         * @property imageUrl\n         * @type {String}\n         */\n        this.imageUrl = null;\n        /**\n         * 퍼포먼스 향상을 위해서, 계속해서 url에 대한 이미지 객체를 생성하는 것이 아닌, 한번 만들어놓고 사용하기 위한 image 객체\n         * @property image\n         * @type {Object}\n         */\n        this.image = null;\n\n        /**\n         * 선 연결시, 시작점 및 종착점, 시작 좌표 및 종착 좌표를 가지고 있는 배열 형태의 객체 모음\n         * @property _linkInfo\n         * @type {Array}\n         */\n        this._linkInfo = [];\n\n        this.initialize();\n    }\n\n    /**\n     * initialize\n     * @memberOf  Layer\n     * @function initialize\n     */\n    initialize() {\n        let self = this,\n            // 타이틀 등의 text base\n            controlBase = $('<div class=\"control-base\"></div>')\n            .css({\n                width: '100%',\n                height: '100%',\n                position: 'absolute',\n                'pointer-events': 'none'\n            }),\n            // layer base\n            layerBase = $('<div class=\"layer-base\"></div>')\n            .css({\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                'z-index': self.zIndex,\n                width: self.width,\n                height: self.height\n            });\n        // text base 바인딩\n        this.controlBase = controlBase;\n\n        try {\n            // layer base에 id 설정\n            layerBase.attr('layer-id', this.layerId);\n\n            // text layer 추가\n            layerBase.append(controlBase);\n\n            this.target\n                .append(layerBase);\n\n            // generate layer using type\n            switch (this.type) {\n                case 'canvas':\n                    // layerObjId making\n                    self.layerObjId = 'canvas-' + self.layerId;\n\n                    // layer obj generate\n                    let canvas = document.createElement('canvas');\n                    // layer id binding\n                    canvas.id = self.layerObjId;\n\n                    // NOTE: default canvas set width / height\n                    // layer width binding\n                    canvas.width = self.width;\n                    // layer height binding\n                    canvas.height = self.height;\n\n                    // canvas append\n                    layerBase.append($(canvas));\n\n                    // generate fabric object\n                    this.layerObj = canvas;\n                    break;\n                case 'svg':\n                    break;\n            }\n\n            this.base = layerBase;\n        } catch (e) {\n            console.error('set layer error:', e.toString());\n        }\n    }\n\n    /**\n     * layer에서 사용되는 this 변수들을 초기화한다.\n     * @memberof Layer\n     * @function initVariables\n     */\n    initVariables() {\n        // polygon\n        this._drawPath = null;\n        this._drawStartPos = null;\n        this._editPathArr = [];\n\n        // image 객체\n        this.imageUrl = null;\n        this.image = null;\n    }\n\n    /**\n     * layer를 showing 한다.\n     * @memberof Layer\n     * @function showLayer\n     */\n    showLayer() {\n        this.base.css('display', '');\n    }\n\n    /**\n     * layer를 hide 한다.\n     * @memberof Layer\n     * @function hideLayer\n     */\n    hideLayer() {\n        this.base.css('display', 'none');\n    }\n\n    /**\n     * group을 showing 한다.\n     * @memberof Layer\n     * @function showGroup\n     * @param {String} groupId group id\n     */\n    showGroup(groupId) {\n        this._group[groupId].show = true;\n        this.controlBase.find('.text-obj[group-id=\"' + groupId + '\"]').css('display', '');\n        this.drawLayer();\n    }\n\n    /**\n     * group을 hide 한다.\n     * @memberof Layer\n     * @function hideGroup\n     * @param {String} groupId group id\n     */\n    hideGroup(groupId) {\n        this._group[groupId].show = false;\n        this.controlBase.find('.text-obj[group-id=\"' + groupId + '\"]').css('display', 'none');\n        this.drawLayer();\n    }\n\n    /**\n     * change index\n     * @param  {Number} zIndex z-index\n     */\n    changeIndex(zIndex) {\n        this.zIndex = zIndex;\n        this.base.css('z-index', zIndex);\n    }\n\n    /**\n     * shape를 선으로 연결한다.\n     * @memberof Layer\n     * @function linkShape\n     * @param {Object} target\n     * @param {Array} link\n     */\n    linkShape(target, link, opt) {\n        const self = this;\n\n        let linkArr = [];\n\n        for (let idx = 0; idx < link.length; idx++) {\n            let linkObj = link[idx],\n                linkInfo = {\n                    id: target.id + '~' + linkObj.id,\n                    targetId: target.id,\n                    linkId: linkObj.id,\n                    layer: self.layerObj,\n                    sx: target.posx + (target.width / 2),\n                    sy: target.posy + (target.height / 2),\n                    ex: linkObj.posx + (linkObj.width / 2),\n                    ey: linkObj.posy + (linkObj.height / 2)\n                };\n\n            linkInfo = Object.assign(linkInfo, opt);\n\n            linkArr.push(linkInfo);\n        }\n\n        // link info에 같이 merge한다.\n        this._linkInfo = [...this._linkInfo, ...linkArr];\n        this.drawLayer();\n    }\n\n    /**\n     * link를 그린다.\n     * @memberof Layer\n     * @function addLink\n     * @param {Array} linkInfo link 정보\n     * @param {Object} opt option object\n     * @param {Function} callback callback function\n     */\n    addLink(linkInfo, opt, callback) {\n        const self = this;\n\n        for (let idx in linkInfo) {\n            let linkObj = linkInfo[idx];\n\n            linkObj.layer = self.layerObj;\n        }\n\n        // link info에 merge 한다.\n        this._linkInfo = [...this._linkInfo, ...linkInfo];\n\n        this.drawLink(() => {\n            typeof callback == 'function' && callback();\n        });\n    }\n\n    /**\n     * remove shape\n     * @param  {Object} shape shape object\n     */\n    remove(shape) {\n        // remove object type\n        switch (this.type) {\n            case 'canvas':\n                //this.layerObj.remove(shape);\n                break;\n            case 'svg':\n                break;\n        }\n    }\n\n    /**\n     * position에 따른 해당 레이어의 shape를 반환한다.\n     * @memberof Layer\n     * @function searchByPosition\n     * @param {Number} sx start x\n     * @param {Number} sy start y\n     * @param {Number} ex end x\n     * @param {Number} ey end y\n     * @return {Array} list 해당 정보가 포함된 shpae들의 리스트\n     */\n    searchByPosition(sx, sy, ex, ey) {\n        let self = this,\n            list = [];\n\n        // group에서 shape 추출\n        for (let groupId in this._group) {\n            let group = self._group[groupId],\n                shapes = group.items;\n\n            // group 내의 shape들을 loop돌며 비교\n            for (let shapeId in shapes) {\n                let shape = shapes[shapeId].obj;\n\n                switch (shape.type) {\n                    case 'polygon':\n                        // click의 경우\n                        if (sx === ex && sy === ey) {\n                            if (sx > shape.x1 && shape.x2 > ex && sy > shape.y1 && shape.y2 > ey) {\n                                list.push(shape);\n                            }\n                            // 드래그 하는 경우\n                        } else {\n                            if (sx < shape.posx && shape.posx < ex && sy < shape.posy && shape.posy < ey) {\n                                list.push(shape);\n                            }\n                        }\n                        break;\n                    case 'image':\n                        let startx = shape.posx,\n                            starty = shape.posy,\n                            endx = shape.posx + shape.width,\n                            endy = shape.posy + shape.height;\n\n                        if (sx === ex && sy === ey) {\n                            if (sx > startx && endx > ex && sy > starty && endy > ey) {\n                                list.push(shape);\n                            }\n                        } else {\n                            if (sx < startx && endx < ex && sy < starty && endy < ey) {\n                                list.push(shape);\n                            }\n                        }\n                        break;\n                }\n            }\n        }\n\n        return list;\n    }\n\n    /**\n     * shape들을 선택 상태로 변경한다.\n     * @memberof Layer\n     * @function selectShape\n     * @param {Array} list shape list\n     * @param {Object} resizeOpt resize 관련 option\n     * @param {Object} dndOpt drag drop 관련 option\n     */\n    selectShape(list, resizeOpt, dndOpt) {\n        this._selectedShape = list;\n\n        if (list.length > 0) {\n            for (let idx = 0; idx < list.length; idx++) {\n                let shape = list[idx];\n                shape.select();\n            }\n\n            // control base의 pointer events를 활성화 한다.\n            this.controlBase\n                .css('pointer-events', '');\n        }\n\n        this.drawLayer();\n        this.controlHandler(resizeOpt, dndOpt);\n    }\n\n    /**\n     * bounding position 값을 추출한다.\n     * @memberof Layer\n     * @function getBoundingPosition\n     * @param {Object} ev event object\n     * @return {Number} x position x\n     * @return {Number} y position y\n     */\n    getBoundingPosition(ev) {\n        let boundingBox = this.layerObj.getBoundingClientRect(),\n            x = (ev.clientX - boundingBox.left) * (this.layerObj.width / boundingBox.width),\n            y = (ev.clientY - boundingBox.top) * (this.layerObj.height / boundingBox.height);\n\n        return {\n            x: parseInt(x),\n            y: parseInt(y)\n        };\n    }\n\n    /**\n     * control base에서 이벤트를 핸들링한다.\n     * @memberof Layer\n     * @function controlHandler\n     * @param {Object} resizeOpt resize 옵션\n     * @param {Object} dndOpt drag drop 옵션\n     */\n    controlHandler(resizeOpt, dndOpt) {\n        const self = this,\n            doc = $(document);\n\n        this.controlBase.unbind(Event.DRAW_START);\n        doc.unbind(Event.DRAW_MOVE);\n        this.controlBase.unbind(Event.DRAW_END);\n\n        this.controlBase.bind(Event.DRAW_START, (sv) => {\n            let target = $(sv.target),\n                parent = target.closest('.shape-controller');\n\n\n            // event의 target이 핸들러인 경우 이벤트 바인딩\n            if (target.hasClass('handler')) {\n                let boundingPosition = self.getBoundingPosition(sv),\n                    targetType = target.attr('handler-type'),\n                    targetId = parent.attr('id').split('control-')[1],\n                    left = boundingPosition.x,\n                    top = boundingPosition.y,\n                    width = parseInt(parent.width()),\n                    height = parseInt(parent.height()),\n                    diffX, diffY;\n\n                switch (targetType) {\n                    case 'lt':\n                        diffX = left + width;\n                        diffY = top + height;\n                        break;\n                    case 'lb':\n                        diffX = left + width;\n                        diffY = top - height;\n                        break;\n                    case 'rt':\n                        diffX = left - width;\n                        diffY = top + height;\n                        break;\n                    case 'rb':\n                        diffX = left - width;\n                        diffY = top - height;\n                        break;\n                }\n\n                sv.stopPropagation();\n                doc.bind(Event.DRAW_MOVE, (mv) => {\n                    mv.stopPropagation();\n                    let movePos = self.getBoundingPosition(mv);\n\n                    switch (targetType) {\n                        // 좌상\n                        case 'lt':\n                            if (movePos.x < diffX) {\n                                left = movePos.x;\n                                width = diffX - movePos.x;\n                            }\n\n                            if (movePos.y < diffY) {\n                                top = movePos.y;\n                                height = diffY - movePos.y;\n                            }\n                            break;\n                            // 좌하\n                        case 'lb':\n                            if (movePos.x < diffX) {\n                                left = movePos.x;\n                                width = diffX - movePos.x;\n                            }\n\n                            if (movePos.y > diffY) {\n                                top = diffY;\n                                height = movePos.y - diffY;\n                            }\n                            break;\n                            // 우상\n                        case 'rt':\n                            if (movePos.x > diffX) {\n                                left = diffX;\n                                width = movePos.x - diffX;\n                            }\n\n                            if (movePos.y < diffY) {\n                                top = movePos.y;\n                                height = diffY - movePos.y;\n                            }\n                            break;\n                            // 우하\n                        case 'rb':\n                            if (movePos.x > diffX) {\n                                left = diffX;\n                                width = movePos.x - diffX;\n                            }\n\n                            if (movePos.y > diffY) {\n                                top = diffY;\n                                height = movePos.y - diffY;\n                            }\n                            break;\n                    }\n\n                    // 셀렉터에 대한 css를 변경한다.\n                    parent.css({\n                        left: left - 5,\n                        top: top - 5,\n                        width: width + 10,\n                        height: height + 10\n                    });\n\n                    // 객체를 선택하고, 변경 값에 따른 오브젝트를 변경한다.\n                    self.modifyShape({\n                        id: targetId,\n                        left: left,\n                        top: top,\n                        width: width,\n                        height: height\n                    }, () => {\n                        // layer를 다시 그린다.\n                        self.drawLayer();\n                    });\n                });\n\n                typeof resizeOpt.onResize === 'function' && resizeOpt.onResize(self.getShape(null, targetId), moveLeft, moveTop, moveWidth, moveHeight);\n\n                self.controlBase.one(Event.DRAW_END, (ev) => {\n                    ev.stopPropagation();\n                    let endPos = self.getBoundingPosition(ev);\n\n                    typeof resizeOpt.onEnd === 'function' && resizeOpt.onEnd(self.getShape(null, targetId), left, top, width, height);\n\n                    self.controlHandler(resizeOpt, dndOpt);\n                });\n            } else if (target.hasClass('controller-wrapper')) {\n                let targetId = parent.attr('id').split('control-')[1];\n                sv.stopPropagation();\n                const pw = parseInt(parent.width()),\n                    ph = parseInt(parent.height());\n                // 드래그 중\n                doc.bind(Event.DRAW_MOVE, (mv) => {\n                    mv.stopPropagation();\n                    let movePos = self.getBoundingPosition(mv),\n                        // 중심점을 이동 점으로 보고 x, y좌표 설정\n                        sx = movePos.x - (pw / 2),\n                        sy = movePos.y - (ph / 2);\n\n                    // 셀렉터에 대한 css를 변경한다.\n                    parent.css({\n                        left: sx - 5,\n                        top: sy - 5\n                    });\n\n                    typeof dndOpt.onMove === 'function' && dndOpt.onMove(self.getShape(null, targetId), sx, sy);\n\n                    // 객체를 선택하고, 변경 값에 따른 오브젝트를 변경한다.\n                    self.modifyShape({\n                        left: sx,\n                        top: sy,\n                        id: targetId\n                    }, () => {\n                        // layer를 다시 그린다.\n                        self.drawLayer();\n                    });\n                });\n\n                // 드래그 종료\n                self.controlBase.one(Event.DRAW_END, (ev) => {\n                    ev.stopPropagation();\n                    // 드래그 엔드에 대한 포지션 추출\n                    let endPos = self.getBoundingPosition(ev),\n                        sx = endPos.x - (pw / 2),\n                        sy = endPos.y - (ph / 2);\n\n                    // 셀렉터에 대한 css를 변경한다.\n                    parent.css({\n                        left: sx - 5,\n                        top: sy - 5\n                    });\n\n                    // 객체를 선택하고, 변경 값에 따른 오브젝트를 변경한다.\n                    self.modifyShape({\n                        left: sx,\n                        top: sy,\n                        id: targetId\n                    }, () => {\n                        // layer를 다시 그린다.\n                        self.drawLayer();\n                        self.controlHandler(resizeOpt, dndOpt);\n                        typeof dndOpt.onEnd === 'function' && dndOpt.onEnd(self.getShape(null, targetId), sx, sy);\n                    });\n                });\n            }\n        });\n    }\n\n    /**\n     * 연결 정보를 이동 시킨다.\n     * @memberof Layer\n     * @function linkMove\n     * @param {Object} target target\n     * @param {Function} callback 호출 후 callback function\n     */\n    linkMove(target, callback) {\n        const self = this;\n\n        for (var idx = 0; idx < this._linkInfo.length; idx++) {\n            let link = self._linkInfo[idx],\n                linkObj = link.obj,\n                type = null,\n                x = target.posx + (target.width / 2),\n                y = target.posy + (target.height / 2);\n\n            // targetId가 동일한 경우\n            if (link.targetId === target.id) {\n                type = 'start';\n            }\n\n            if (link.linkId === target.id) {\n                type = 'end';\n            }\n\n            linkObj.modifyPosition(type, x, y);\n        }\n\n\n        typeof callback == 'function' && callback();\n    }\n\n    /**\n     * 형태를 변경한다.\n     * @memberof Layer\n     * @function modifyShape\n     * @param {Object} opt option object\n     * @param {Function} callback 형태 변경 한 후의 callback function\n     */\n    modifyShape(opt, callback) {\n        let self = this;\n        const list = this._selectedShape;\n\n        if (list.length > 0) {\n            for (let idx = 0; idx < list.length; idx++) {\n                let shape = list[idx];\n\n                if (shape.id == opt.id) {\n                    // 형태 변경\n                    shape.modifyShape(opt, () => {\n                        self.linkMove(shape, () => {\n                            typeof callback == 'function' && callback();\n                        });\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * 선택된 모든 shape들을 해체 상태로 놓는다.\n     * @memberof Layer\n     * @function unselectShapeAll\n     */\n    unselectShapeAll() {\n        let list = this._selectedShape;\n\n        for (let idx = 0; idx < list.length; idx++) {\n            let shape = list[idx];\n            shape.unSelect();\n        }\n\n        this.drawLayer();\n    }\n\n    /**\n     * 오브젝트를 추가한다.\n     * @memberof Layer\n     * @function addObj\n     * @param {Object} position 위치 객체\n     * @param {Object} opt 옵션 객체\n     * @param {Function} callback callback function\n     */\n    addObj(position, section, opt, callback) {\n        let option = Object.assign({}, opt);\n\n        if (!this._group[section.id]) {\n            this._group[section.id] = {\n                name: section.name || section.id,\n                show: true,\n                items: {}\n            };\n        }\n\n        if (!option.id) {\n            this._uniqueId++;\n            option.id = section.id + '-' + this._uniqueId;\n        }\n\n        if (option.type === 'image') {\n            let image = new Image();\n\n            image.src = option.url;\n            option.image = image;\n        }\n\n        if (!option.width) {\n            option.width = 25;\n        }\n\n        if (!option.height) {\n            option.height = 25;\n        }\n\n        option.type = opt.type;\n        option.posx = position.x;\n        option.posy = position.y;\n        // layer 추가\n        option.layer = this.layerObj;\n        // text base 추가\n        option.controlBase = this.controlBase;\n        option.group = {\n            id: section.id,\n            show: this._group[section.id].show,\n            name: this._group[section.id].name\n        };\n\n        if (!this._group[section.id]['items'][option.id]) {\n            this._group[section.id]['items'][option.id] = option;\n            this.drawLayer(callback);\n        }\n    }\n\n    /**\n     * add polygon shape\n     * @memberof Layer\n     * @function addPolygon\n     * @param {Object}   polygon   polygon object\n     * @param {Array}   pathArr   path array\n     * @param {String}   groupName group name\n     * @param {Object}   opt       option object\n     * @param {Function} callback  callback function\n     */\n    addPolygon(polygon, pathArr, groupId, opt, callback) {\n        var shapeOpt = null;\n\n        if (!this._group[groupId]) {\n            this._group[groupId] = {\n                name: groupId,\n                show: true,\n                items: {}\n            };\n        }\n\n        // if not exist opt, create object\n        if (!opt) {\n            shapeOpt = {};\n        } else {\n            shapeOpt = opt;\n        }\n\n        shapeOpt.type = 'polygon';\n\n        // obj id\n        let objId = null;\n        // unique id make      \n        if (!shapeOpt.id) {\n            this._uniqueId++;\n            objId = groupId + '_' + this._uniqueId;\n        } else {\n            objId = shapeOpt.id;\n        }\n\n        // name make\n        let objName = null;\n        if (!shapeOpt.name) {\n            objName = 'unnamed';\n        } else {\n            objName = shapeOpt.name;\n        }\n\n        let objInfo = this.getObjPolygonInfo(pathArr, shapeOpt);\n\n        // shape option 바인딩\n        for (let key in shapeOpt) {\n            objInfo[key] = shapeOpt[key];\n        }\n\n        // type 추가\n        objInfo.type = 'polygon';\n        // id 추가\n        objInfo.id = objId;\n        // name 추가\n        objInfo.name = objName;\n        // layer 추가\n        objInfo.layer = this.layerObj;\n        // text base 추가\n        objInfo.controlBase = this.controlBase;\n        // add separator\n        objInfo.group = {\n            id: groupId,\n            show: this._group[groupId].show,\n            name: this._group[groupId].name\n        };\n        // show text\n        objInfo.showText = true;\n        // if group object is not exist, add polygon\n        if (!this._group[groupId]['items'][objId]) {\n            this._group[groupId]['items'][objId] = objInfo;\n            this.drawLayer(callback);\n        } else {\n            throw 'object is duplicated in this group';\n        }\n    }\n\n    /**\n     * shape 정보를 조회한다.\n     * @memberof Layer\n     * @function getShape\n     * @param {String} separatorName separator 이름\n     * @param {String} shapeId shape id\n     * @return {Object} obj 조회될 object\n     */\n    getShape(groupId, shapeId) {\n        var obj = null;\n\n        // group이 있는 경우\n        if (this._group) {\n            if (groupId != void 0) {\n                // separatorName에 해당하는 group이 있는 경우\n                if (this._group[groupId]) {\n                    let targetGroup = this._group[groupId].items;\n\n                    for (var id in targetGroup) {\n                        let shape = targetGroup[id];\n\n                        if (id === shapeId) {\n                            obj = shape;\n                        }\n                    }\n                }\n            } else {\n                let shapeArr = [];\n                // group id가 없는 경우 object를 돌며 확인한다.\n                for (let id in this._group) {\n                    let group = this._group[id];\n\n                    for (let sid in group.items) {\n                        let shape = group.items[sid];\n\n                        if (shape.id === shapeId) {\n                            shapeArr.push(shape);\n                        }\n                    }\n                }\n\n                // array를 object에 넣는다.\n                obj = shapeArr;\n            }\n        }\n\n        return obj;\n    }\n\n    /**\n     * add group\n     * @param {Object} item      add object\n     * @param {String} groupName group id\n     */\n    addGroup(item, groupOpt) {\n        var groupId = groupOpt.id,\n            groupName = groupOpt.name;\n\n        if (!this._group[groupId]) {\n            this._group[groupId] = {\n                name: groupName ? groupName : groupId, // group name 있는지 여부에 따라 바인딩\n                show: true,\n                items: {}\n            };\n        }\n\n        if (!this._group[groupId]['items'][item.id]) {\n            if (!item.layer || JSON.stringify(item.layer) == '{}') {\n                item.layer = this.layerObj;\n            }\n\n            if (!item.controlBase || JSON.stringify(item.controlBase) == '{}') {\n                item.controlBase = this.controlBase;\n            }\n\n            this._group[groupId]['items'][item.id] = item;\n            return true;\n        } else {\n            return false;\n            throw 'object is duplicated in this group';\n        }\n    }\n\n    /**\n     * group 및 관련된 데이터를 전체 삭제한다.\n     * @param {String} groupId group id\n     * @param {Function} callback callback function\n     */\n    deleteGroup(groupId, callback) {\n        if (this._group[groupId]) {\n            delete this._group[groupId];\n        }\n\n        // layer 그리고 난 후 callback 트리거\n        this.drawLayer(() => {\n            typeof callback == 'function' && callback();\n        });\n    }\n\n    /**\n     * link를 그린다.\n     * @memberof Layer\n     * @function drawLink\n     * @param {Function} callback 그리고 난 후 callback function\n     */\n    drawLink(callback) {\n        const self = this;\n        const ctx = this.layerObj.getContext('2d');\n\n        for (var idx = 0; idx < this._linkInfo.length; idx++) {\n            let link = self._linkInfo[idx];\n\n            if (!link.obj) {\n                link.obj = new Link(link);\n            }\n\n            let line = link.obj;\n\n            line.render(ctx);\n        }\n\n        typeof callback == 'function' && callback();\n    }\n\n    /**\n     * draw layer\n     * @memberof Layer\n     * @function drawLayer\n     * @param  {Function} callback callback after draw layer object\n     */\n    drawLayer(callback) {\n        let self = this,\n            ctx = self.layerObj.getContext('2d'),\n            width = this.width,\n            height = this.height;\n\n        // clear rect\n        ctx.clearRect(0, 0, width, height);\n\n        for (var idx = 0; idx < this._linkInfo.length; idx++) {\n            let link = self._linkInfo[idx];\n\n            if (!link.obj) {\n                link.obj = new Link(link);\n            }\n\n            let line = link.obj;\n\n            line.render(ctx);\n        }\n\n\n        // shape 정보 그리기\n        for (var id in this._group) {\n            let group = self._group[id].items;\n\n            // group에서 show property가 true인 경우에만 렌더링\n            if (self._group[id].show) {\n                for (var id in group) {\n                    (() => {\n                        let shape = group[id];\n\n                        switch (shape.type) {\n                            case 'polygon':\n                                if (!shape.obj) {\n                                    shape.obj = new Polygon(shape, ctx);\n                                }\n\n                                // obj 추출\n                                let polygon = shape.obj;\n\n                                polygon.render(ctx);\n                                break;\n                            case 'image':\n                                if (!shape.obj) {\n                                    shape.obj = new ImageShape(shape, ctx, true);\n                                } else {\n                                    let image = shape.obj;\n\n                                    image.render(ctx);\n                                }\n                                break;\n                        }\n                    })();\n                }\n            }\n        }\n\n        typeof callback == 'function' && callback();\n    }\n\n    /**\n     * edit polygon \n     * @memberof Layer\n     * @function editPolygon\n     * @param  {Object}   polygon  polygon\n     * @param  {Array}   pathArr  path info\n     * @param  {Object}   opt      option info\n     * @param  {Boolean}  isEnd    is end boolean\n     * @param  {Boolean}  isFinish is finish\n     * @param  {Function} callback callback function after edit\n     */\n    editPolygon(polygon, pathArr, opt, isEnd, isFinish, callback) {\n        let self = this;\n\n        this.drawLayer(() => {\n            switch (self.type) {\n                case 'canvas':\n                    self.drawCanvasPolygon(pathArr, opt, isEnd, isFinish, callback);\n                    break;\n                case 'svg':\n                    break;\n            }\n        });\n    }\n\n    /**\n     * 오브젝트를 레이어에 그린다.\n     * @memberof Layer\n     * @function drawObj\n     * @param {Object} position 포지션\n     * @param {Object} option 오브젝트 옵션\n     */\n    drawShape(position, option) {\n        let self = this;\n        this.drawLayer(() => {\n            switch (self.type) {\n                case 'canvas':\n                    self.drawCanvasObj(position, option);\n                    break;\n                case 'svg':\n                    break;\n            }\n        });\n    }\n\n    /**\n     * 레이어에 오브젝트를 그린다.\n     * @memberof Layer\n     * @function drawCanvasObj\n     * @param {Object} position 포지션 객체\n     * @param {Object} option 옵션 객체\n     */\n    drawCanvasObj(position, option) {\n        let self = this,\n            layerCanvas = this.layerObj,\n            ctx = layerCanvas.getContext('2d');\n\n        // option type에 따라 분기 처리\n        switch (option.type) {\n            case 'image': // 이미지인 경우\n                // 현재 설정되어 있는 이미지가 option url이 아닌 경우\n                if (self.imageUrl != option.url) {\n                    self.image = null;\n\n                    let image = new Image();\n\n                    image.onload = function() {\n                        console.log('image onload');\n                        ctx.drawImage(image, position.x, position.y, option.width || 25, option.height || 25);\n                    };\n\n                    image.onerror = function(e) {\n                        console.log('e');\n                    };\n\n                    image.src = option.url;\n\n                    self.image = image;\n                    self.imageUrl = option.url;\n                } else {\n                    ctx.drawImage(self.image, position.x, position.y, option.width || 25, option.height || 25);\n                }\n                break;\n            case 'shape':\n                break;\n        }\n    }\n\n    /**\n     * draw canvas polygon\n     * @memberof Layer\n     * @function drawCanvasPolygon\n     * @param  {Array}   pathArr  path info array\n     * @param  {Object}   opt      option info\n     * @param  {Boolean}  isEnd    is end\n     * @param  {Boolean}  isFinish is finish\n     * @param  {Function} callback callback function\n     */\n    drawCanvasPolygon(pathArr, opt, isEnd, isFinish, callback) {\n        let self = this,\n            ctx = this.layerObj.getContext('2d');\n\n        if (self._prevData) {\n            ctx.putImageData(self._prevData, 0, 0);\n        }\n\n        // set stroke style\n        ctx.strokeStyle = opt ? (opt.stroke || '#000000') : '#000000';\n\n        // set begin path\n        ctx.beginPath();\n\n        // path loop move adn line to\n        for (var idx = 0; idx < pathArr.length; idx++) {\n            let pos = pathArr[idx];\n            switch (idx) {\n                case 0:\n                    ctx.moveTo(pos.x, pos.y);\n                    break;\n                default:\n                    ctx.lineTo(pos.x, pos.y);\n                    break;\n            }\n        }\n\n        // if is end\n        if (isEnd) {\n            this._editPolygon = null;\n\n            let fillStyle = null;\n            if (opt) {\n                if (opt.fill) {\n                    fillStyle = Color.isHex(opt.fill) ? (Color.hexToRgba((opt.fill || '#bdbdbd'))) : opt.fill;\n                } else {\n                    fillStyle = Color.hexToRgba('#bdbdbd');\n                }\n            }\n            ctx.fillStyle = fillStyle;\n            ctx.fill();\n        }\n\n        ctx.stroke();\n        ctx.closePath();\n\n        // if is not end, draw circle point\n        if (!isEnd) {\n            for (var idx = 0; idx < pathArr.length; idx++) {\n                let pos = pathArr[idx];\n\n                self.drawCanvasPolygonHandler(ctx, pos);\n            }\n        }\n\n        if (isFinish) {\n            ctx.save();\n            typeof callback == 'function' && callback();\n        }\n    }\n\n    /**\n     * draw canvas handler for polygon\n     * @param  {Object} ctx context 2d object\n     * @param  {Object} pos position object\n     */\n    drawCanvasPolygonHandler(ctx, pos) {\n        // draw arc\n        ctx.beginPath();\n        ctx.fillStyle = '#000000';\n        ctx.arc(pos.x, pos.y, 3, 0, Math.PI * 2, true);\n        ctx.fill();\n        ctx.stroke();\n        ctx.closePath();\n        // close path\n    }\n\n    /**\n     * copy canvas image data\n     * @memberof Layer\n     * @function copyCanvasImageData\n     */\n    copyCanvasImageData(callback) {\n        let layer = this.layerObj,\n            ctx = layer.getContext('2d');\n\n        this._prevData = ctx.getImageData(0, 0, this.width, this.height);\n\n        typeof callback == 'function' && callback();\n    }\n\n    /**\n     * get canvas path info\n     * @memberof Layer\n     * @function getObjPolygonInfo\n     * @param  {Array} pathArr path array\n     */\n    getObjPolygonInfo(pathArr) {\n        let posxArr = [],\n            posyArr = [];\n\n        // posx, posy making array\n        for (var idx = 0; idx < pathArr.length; idx++) {\n            posxArr.push(pathArr[idx].x);\n            posyArr.push(pathArr[idx].y);\n        }\n\n        let minx = Math.min(...posxArr), // x 최소값\n            maxx = Math.max(...posxArr), // x 최대값\n            miny = Math.min(...posyArr), // y 최소값\n            maxy = Math.max(...posyArr), // y 최대값\n            width = Math.abs(maxx - minx),\n            height = Math.abs(maxy - miny);\n\n        let returnObj = {\n            paths: pathArr,\n            posx: parseInt((minx + maxx) / 2, 10),\n            posy: parseInt((miny + maxy) / 2, 10),\n            width: width,\n            height: height,\n            x1: minx,\n            y1: miny,\n            x2: maxx,\n            y2: maxy\n        };\n\n        return returnObj;\n    }\n\n    /**\n     * layer내의 위치를 반환한다.\n     * @memberof Layer\n     * @function getLayerPosition\n     * @param {Object} ev event\n     */\n    getLayerPosition(ev) {\n        let layerPosX = ev.offsetX,\n            layerPosY = ev.offsetY;\n\n        return {\n            x: parseInt(layerPosX),\n            y: parseInt(layerPosY)\n        };\n    }\n\n    /**\n     * 페이지 이동 등, flaats 내에서 layer에 대한 모든 객체를 초기화 하기 위한 소멸자 함수\n     * @memberof Layer\n     * @function destroy\n     */\n    destroy() {\n        const self = this;\n\n        for (let groupId in this._group) {\n            let group = self._group[groupId];\n\n            for (let shapeId in group.items) {\n                let shape = group.items[shapeId];\n\n                shape = null;\n            }\n\n            group = null;\n        }\n\n        this.base = null; // base\n        this.layerObj = null; // layer object\n        this.layerObjId = null;\n        this.editShape = null;\n        this.controlBase = null;\n        // polygon\n        this._drawPath = null;\n        this._drawStartPos = null;\n        this._editPathArr = [];\n\n        // section group\n        this._uniqueId = 0;\n\n        // 선택된 shape들\n        this._selectedShape = [];\n\n        // image 객체\n        this.imageUrl = null;\n        this.image = null;\n\n        // link 객체\n        this._linkInfo = [];\n    }\n}","// import Event from './events';\n\nvar dragbox = $('<div class=\"selector-handler\" style=\"position:absolute;top:0;left:0;width:0;height:0;opacity:0.4;z-index:9999;border:1px solid black;background-color:black;\"></div>'),\n    initX = 0,\n    initY = 0;\n\n/**\n * selector class\n * @name  Selector\n * @version  0.1.0\n * @author  trustyoo86@linkit.kr\n */\nclass Selector {\n  constructor() {\n    this.enable = false;  // enable selector\n  }\n\n  /**\n   * initialize\n   * @memberof Selector\n   * @function init\n   */\n  init() {\n    this.enable = false;\n    dragbox.remove();\n    dragbox = $('<div class=\"selector-handler\" style=\"position:absolute;top:0;left:0;width:0;height:0;opacity:0.4;z-index:9999;border:1px solid black;background-color:black;\"></div>');\n  }\n\n  /**\n   * selector start\n   * @memberof Selector\n   * @function start\n   * @param  {Object}   target   target object\n   * @param  {Object}   ev        event object\n   * @param  {Function} callback [description]\n   */\n  start(targetDiv, target, ev, callback) {\n    if (!this.enable) {\n      return ;\n    }\n\n    let boundingBox = null,\n        x = null,\n        y = null;\n\n\n    boundingBox = target.getBoundingClientRect();\n    x = (ev.clientX - boundingBox.left) * (target.width / boundingBox.width);\n    y = (ev.clientY - boundingBox.top) * (target.height / boundingBox.height);\n\n    initX = x;\n    initY = y;\n\n    dragbox.css({\n      top: initX,\n      lefT: initY,\n      width: 0,\n      height: 0,\n      display: 'none'\n    });\n\n    typeof callback == 'function' && callback(initX, initY);\n\n    targetDiv.append(dragbox);\n  }\n\n  /**\n   * selector draw\n   * @memberof Selector\n   * @function draw\n   * @param  {Object}   ev        event object\n   * @param  {Function} callback callback function after draw\n   */\n  draw(target, ev, callback) {\n    if (!this.enable) {\n      return ;\n    }\n\n    let boundingBox = null,\n        x = null,\n        y = null;\n\n    boundingBox = target.getBoundingClientRect();\n    x = (ev.clientX - boundingBox.left) * (target.width / boundingBox.width);\n    y = (ev.clientY - boundingBox.top) * (target.height / boundingBox.height);\n\n    let posX = Math.min(x, initX),\n        posY = Math.min(y, initY),\n        boxW = Math.abs(x - initX),\n        boxH = Math.abs(y - initY);\n\n    dragbox.css({\n      top: posY,\n      left: posX,\n      width: boxW,\n      height: boxH,\n      display: 'block'\n    });\n\n    typeof callback == 'function' && callback(posY, posX, boxW, boxH);\n  }\n\n  /**\n   * selector drag end\n   * @memberof Selector\n   * @function end\n   * @param  {Function} callback callback function after drag end\n   */\n  end(target, ev, callback) {\n    if (!this.enable) {\n      return ;\n    }\n\n    let boundingBox = null,\n        posx = null,\n        posy = null,\n        x = null,\n        y = null;\n    \n    // bounding box 좌표를 얻어낸다.\n    boundingBox = target.getBoundingClientRect();\n    // position x\n    posx = (ev.clientX - boundingBox.left) * (target.width / boundingBox.width);\n    // position y\n    posy = (ev.clientY - boundingBox.top) * (target.height / boundingBox.height);\n\n    x = Math.min(posx, initX);\n    y = Math.min(posy, initY);\n\n    // selector 변수를 초기화한다.\n    initX = 0;\n    initY = 0;\n\n    // style convert number\n    let style = dragbox[0].style,\n        w = parseInt(style.width),\n        h = parseInt(style.height);\n\n    dragbox.remove();\n\n    typeof callback == 'function' && callback(x, y, w, h);\n  }\n}\n\nexport default Selector;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}